{"version":3,"file":"index.modern.js","sources":["../src/core/convertor/Convertor.ts","../src/core/execution/ExecutionStep.ts","../src/core/resolutions/calculateEvaluator.ts","../src/core/resolutions/calculateNumber.ts","../src/core/resolutions/TypedArrayResolution.ts","../src/core/resolutions/calculateArray.ts","../src/core/resolutions/calculate.ts","../src/core/resolutions/StringResolution.ts","../src/core/scripts/Script.ts","../src/core/convertor/actions-convertor.ts","../src/core/resolutions/BooleanResolution.ts","../src/core/convertor/condition-convertor.ts","../src/core/convertor/log-convertor.ts","../src/core/convertor/loop-convertor.ts","../src/core/convertor/parameters-convertor.ts","../src/core/convertor/script-convertor.ts","../src/core/convertor/convert-action.ts","../src/core/processor/ScriptProcessor.ts"],"sourcesContent":["import { DokAction } from \"../actions/Action\";\nimport { ExecutionStep } from \"../execution/ExecutionStep\";\nimport { ActionConversionMap } from \"./convert-action\";\n\nexport enum ConvertBehavior {\n    NONE,\n    SKIP_REMAINING,\n}\n\nexport type Convertor = (action: DokAction, results: ExecutionStep[], getSteps: (name?: string) => ExecutionStep[], external?: Record<string, any>, actionConversionMap?: ActionConversionMap) => ConvertBehavior | void;\n\nexport const DEFAULT_EXTERNALS = {\n    log: console.log,\n};\n","import { Context } from \"../context/Context\";\nimport { SupportedTypes } from \"../resolutions/supportedTypes\";\n\nexport type ExecutionParameters = Record<string, SupportedTypes>;\nexport type ExecutionStep = (context: Context, parameters: ExecutionParameters) => void;\n\nexport function execute(steps: ExecutionStep[], parameters: ExecutionParameters = {}, context: Context = {}) {\n    if (!context.parameters) {\n        context.parameters = [];\n    }\n\n    const changedParameters = context.parameters[context.parameters.length-1] !== parameters;\n    if (changedParameters) {\n        context.parameters.push(parameters);\n    }\n    for (let step of steps) {\n        step(context, parameters);\n    }\n    if (changedParameters) {\n        context.parameters.pop();\n    }\n}\n","import * as math from \"mathjs\";\nimport { Context } from \"../context/Context\";\nimport { Expression, Formula } from \"./Formula\";\nimport { Resolution } from \"./Resolution\";\n\nexport function hasFormula(resolution: Resolution): boolean {\n    if (isFormula(resolution)) {\n        return true;\n    }\n    if (Array.isArray(resolution)) {\n        return resolution.some(item => !hasFormula(item));\n    }\n    return false;\n}\n\nexport function isFormula(value: Formula | Expression | any) {\n    if (!value) {\n        return false;\n    }\n    if (typeof(value) !== \"string\" && typeof(value) !== \"object\") {\n        return false;\n    }\n    const formula = typeof(value) === \"string\" ? value : value.formula;\n    return formula?.charAt(0) === \"{\" && formula?.charAt(formula.length-1) === \"}\";\n}\n\nexport function calculateEvaluator<T>(evaluator: math.EvalFunction, context: Context | undefined, formula: Formula | Expression, defaultValue: T): T {\n    const scope = context?.parameters?.[context.parameters.length - 1];\n    try {\n        return evaluator.evaluate(scope ?? {}) ?? defaultValue;\n    } catch (e) {\n        console.error(\"Error: \" + e + \" on formula: \" + formula + \", scope: \", scope);\n    }\n    return defaultValue;\n}\n\nexport function getFormulaEvaluator(value: Formula | Expression): math.EvalFunction {\n    if (!isFormula(value)) {\n        throw new Error(`Formula: ${value} must start and end with brackets.`);\n    }\n    const formula = typeof(value) === \"string\" ? value : value.formula;\n    const mathEvaluator = math.parse(formula.substring(1, formula.length - 1)).compile();\n    return mathEvaluator;\n}\n\n","import { ValueOf } from \"../types/ValueOf\";\nimport { Context } from \"../context/Context\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./calculateEvaluator\";\nimport { NumberResolution } from \"./NumberResolution\";\n\n\nexport function calculateNumber(value: NumberResolution, defaultValue = 0): ValueOf<number> {\n    if (typeof (value) === \"number\") {\n        return value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(context?: Context): number {\n            return calculateEvaluator<number>(evaluator, context, value, defaultValue);\n        }\n    };\n}\n","import { Context } from \"../context/Context\";\nimport { TypedArray } from \"../types/TypedArray\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { Expression, Formula } from \"./Formula\";\nimport { NumberResolution } from \"./NumberResolution\";\nimport { calculateNumber } from \"./calculateNumber\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./calculateEvaluator\";\n\nexport type TypedArrayResolution = TypedArray | NumberResolution[] | Formula | Expression;\n\ninterface TypedArrayConstructor {\n    new (size: number): TypedArray;\n    BYTES_PER_ELEMENT: number;\n}\n\nexport function calculateTypedArray(value: TypedArrayResolution, ArrayConstructor: TypedArrayConstructor = Float32Array, defaultNumberValue = 0): ValueOf<TypedArray> {\n    if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n        || value instanceof Int16Array || value instanceof Uint16Array\n        || value instanceof Int32Array || value instanceof Uint32Array) {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        const array = new ArrayConstructor(value.length);\n        const compiledArray = value.map(value => calculateNumber(value, defaultNumberValue));\n        return {\n            valueOf(context?: Context): TypedArray {\n                for (let i = 0; i < compiledArray.length; i++) {\n                    array[i] = compiledArray[i].valueOf(context);\n                }\n                return array;\n            }\n        };    \n    }\n    const formula = value;\n    const evaluator = getFormulaEvaluator(formula);\n    let bufferArray: TypedArray;\n    return {\n        valueOf(context?: Context): TypedArray {\n            const value = calculateEvaluator<TypedArray | undefined>(evaluator, context, formula, undefined);\n            if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n                || value instanceof Int16Array || value instanceof Uint16Array\n                || value instanceof Int32Array || value instanceof Uint32Array) {\n                return value;\n            }\n            if (typeof(value) === \"number\") {\n                if (!bufferArray) {\n                    bufferArray = new ArrayConstructor(value / ArrayConstructor.BYTES_PER_ELEMENT);\n                }\n                return bufferArray;\n            }\n            throw new Error(`Formula ${formula} doesnt't evaluate to a TypedArray.`);\n        }\n    };\n}","import { Context } from \"../context/Context\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { ArrayResolution } from \"./ArrayResolution\";\nimport { calculateResolution } from \"./calculate\";\nimport { hasFormula } from \"./calculateEvaluator\";\nimport { SupportedTypes } from \"./supportedTypes\";\n\nexport function calculateArray(value: ArrayResolution): ValueOf<SupportedTypes> {\n    //  check if we have any resolution to perform\n    if (!hasFormula(value)) {\n        if (typeof(value) === \"object\") {\n            throw new Error(\"value can't be an object.\");\n        }\n        return value;\n    }\n    const evaluator = value.map(resolution => calculateResolution(resolution));\n\n    return {\n        valueOf(context?: Context): SupportedTypes {\n            const value = evaluator.map(evalItem => evalItem.valueOf(context));\n            return value;\n        }\n    };\n}","import { Context } from \"../context/Context\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { ArrayResolution } from \"./ArrayResolution\";\nimport { Resolution } from \"./Resolution\";\nimport { calculateTypedArray } from \"./TypedArrayResolution\";\nimport { calculateArray } from \"./calculateArray\";\nimport { calculateEvaluator, getFormulaEvaluator, hasFormula } from \"./calculateEvaluator\";\nimport { SupportedTypes } from \"./supportedTypes\";\n\nexport function calculateResolution(value: Resolution): ValueOf<SupportedTypes> {\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return undefined;\n            }\n        };\n    }\n    if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n        || value instanceof Int16Array || value instanceof Uint16Array\n        || value instanceof Int32Array || value instanceof Uint32Array) {\n        return value;\n    }\n    if (typeof(value) === \"number\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        if (hasFormula(value)) {\n            return calculateArray(value);\n        }\n        const typeArrayResolution = value as Exclude<typeof value, ArrayResolution>;\n        return calculateTypedArray(typeArrayResolution);\n    }\n    if (typeof(value) === \"string\" && (value.charAt(0) !== \"{\" || value.charAt(value.length-1) !== \"}\")) {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return calculateArray(value);\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(context?: Context): string | number | undefined {\n            return calculateEvaluator<string | number | undefined>(evaluator, context, value, undefined);\n        }\n    };\n}\n","import { Context } from \"../context/Context\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { Expression, Formula } from \"./Formula\";\nimport { calculateEvaluator, getFormulaEvaluator, isFormula } from \"./calculateEvaluator\";\n\nexport type StringResolution = string | Formula | Expression | undefined;\n\nexport function calculateString(value: StringResolution, defaultValue = \"\"): ValueOf<string> {\n    if (typeof(value) === \"string\" && !isFormula(value)) {\n        return value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(context?: Context): string {\n            return calculateEvaluator<string>(evaluator, context, value, defaultValue);\n        }\n    };\n\n}\n","import { DokAction } from \"../actions/Action\";\nimport { Resolution } from \"../resolutions/Resolution\";\n\nexport type Tag = string|[string, string|number|boolean];\n\nexport interface Script {\n    name: string;\n    parameters?: (string|[string, Resolution])[];\n    actions: DokAction[];\n    tags?: Tag[];\n}\n\nexport function getByTags(scripts: Script[], tags: Tag[]): Script[] {\n    return scripts.filter(script => {\n        return tags.every(tag => {\n            if (typeof(tag) === \"string\") {\n                return script.tags?.some((t) => t === tag || (Array.isArray(t) && t[0] === tag))\n            } else {\n                return script.tags?.some((t) => Array.isArray(t) && t[0] === tag[0] && t[1] === tag[1]);\n            }\n        });\n    });\n}\n\nexport function getScriptNamesByTags(scripts: Script[], tags: Tag[]): string[] {\n    return getByTags(scripts, tags).map(({ name }) => name);\n}\n\nexport function getByName(scripts: Script[], name: string | string[]): Script[] {\n    return scripts.filter(script => name.includes(script.name));\n}","import { Convertor } from \"./Convertor\";\nimport { convertAction } from \"./convert-action\";\n\nexport const convertActionsProperty: Convertor = (\n        action,\n        results,\n        getSteps,\n        external) => {\n    action.actions?.forEach(action => convertAction(action, results, getSteps, external));\n}\n\n","import { Expression, Formula } from \"./Formula\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { Context } from \"../context/Context\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./calculateEvaluator\";\nimport { NumberResolution } from \"./NumberResolution\";\n\nexport type BooleanResolution = boolean | Formula | Expression | undefined;\n\nexport function calculateBoolean(value: BooleanResolution | NumberResolution, defaultValue = false): ValueOf<boolean> {\n    if (typeof(value) === \"boolean\" || typeof(value) === \"number\") {\n        return !!value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(context?: Context): boolean {\n            return !!calculateEvaluator<boolean | number>(evaluator, context, value, defaultValue);\n        }\n    };\n}\n","import { ConvertBehavior, Convertor, DEFAULT_EXTERNALS } from \"./Convertor\";\nimport { calculateBoolean } from \"../resolutions/BooleanResolution\";\nimport { ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { convertAction } from \"./convert-action\";\n\nexport const convertConditionProperty: Convertor = (\n        action,\n        results,\n        getSteps,\n        external = DEFAULT_EXTERNALS) => {\n    if (!action.condition) {\n        return ConvertBehavior.SKIP_REMAINING;\n    }\n    const { condition, ...subAction } = action;\n    const conditionResolution = calculateBoolean(condition);\n    const subStepResults: ExecutionStep[] = [];\n    convertAction(subAction, subStepResults, getSteps, external);\n    results.push((context, parameters) => {\n        if (conditionResolution.valueOf(context)) {\n            execute(subStepResults, parameters, context);\n        }\n    });\n    return ConvertBehavior.SKIP_REMAINING;\n}\n","import { Resolution } from \"../resolutions/Resolution\";\nimport { calculateResolution } from \"../resolutions/calculate\";\nimport { Convertor, DEFAULT_EXTERNALS } from \"./Convertor\";\n\nexport const convertLogProperty: Convertor = (\n    action,\n    results,\n    _,\n    external = DEFAULT_EXTERNALS) => {\nconst messages: Resolution[] = Array.isArray(action.log) ? action.log : [action.log];\nconst resolutions = messages.map(m => calculateResolution(m));\nresults.push((context)=> external.log(...resolutions.map(r => r.valueOf(context))));\n}\n\n","import { ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { ConvertBehavior, Convertor, DEFAULT_EXTERNALS } from \"./Convertor\";\nimport { calculateNumber } from \"../resolutions/calculateNumber\";\nimport { convertAction } from \"./convert-action\";\n\nexport const convertLoopProperty: Convertor = (\n        action,\n        stepResults: ExecutionStep[],\n        getSteps,\n        external = DEFAULT_EXTERNALS) => {\n    if (!action.loop) {\n        return ConvertBehavior.SKIP_REMAINING;\n    }\n    const { loop, ...subAction } = action;\n    const loopResolution = calculateNumber(loop, 0);\n    const subStepResults: ExecutionStep[] = [];\n    convertAction(subAction, subStepResults, getSteps, external);\n    stepResults.push((context, parameters) => {\n        const numLoops = loopResolution.valueOf(context);\n        for (let i = 0; i < numLoops; i++) {\n            parameters.index = i;\n            execute(subStepResults, parameters, context);\n        }\n    });\n    return ConvertBehavior.SKIP_REMAINING;\n}\n","import { ConvertBehavior, Convertor, DEFAULT_EXTERNALS } from \"./Convertor\";\nimport { Resolution } from \"../resolutions/Resolution\";\nimport { calculateResolution } from \"../resolutions/calculate\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { convertAction } from \"./convert-action\";\nimport { SupportedTypes } from \"../resolutions/supportedTypes\";\n\nexport const convertParametersProperty: Convertor = (\n        action,\n        results,\n        getSteps,\n        external = DEFAULT_EXTERNALS) => {\n    const { parameters, ...subAction } = action;\n\n    const paramResolutions: Record<string, Resolution> = (parameters ?? {});\n    const paramEntries: [string, ValueOf<SupportedTypes>][] = Object.entries(paramResolutions)\n        .map(([key, resolution]) => [key, calculateResolution(resolution)]);\n\n    const subStepResults: ExecutionStep[] = [];\n    convertAction(subAction, subStepResults, getSteps, external);\n\n    results.push((context, parameters) => {\n        const paramValues: ExecutionParameters = context.objectPool?.pop() ?? {};\n        for (let k in parameters) {\n            paramValues[k] = parameters[k];\n        }\n        for (let entry of paramEntries) {\n            const key: string = entry[0];\n            paramValues[key] = entry[1].valueOf(context);\n        }\n\n        execute(subStepResults, paramValues, context);\n\n        for (let k in paramValues) {\n            delete paramValues[k];\n        }\n        context.objectPool?.push(paramValues);\n    });\n    return ConvertBehavior.SKIP_REMAINING;\n}","import { execute } from \"../execution/ExecutionStep\";\nimport { Convertor } from \"./Convertor\";\n\nexport const convertScriptProperty: Convertor = (\n        action,\n        results,\n        getSteps) => {\n    const steps = getSteps(action.script);\n    results.push((context, parameters) => execute(steps, parameters, context));\n}\n\n","import { DokAction } from \"../actions/Action\";\nimport { Context } from \"../context/Context\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { Script } from \"../scripts/Script\";\nimport { ConvertBehavior, Convertor, DEFAULT_EXTERNALS } from \"./Convertor\";\nimport { convertActionsProperty } from \"./actions-convertor\";\nimport { convertConditionProperty } from \"./condition-convertor\";\nimport { convertLogProperty } from \"./log-convertor\";\nimport { convertLoopProperty } from \"./loop-convertor\";\nimport { convertParametersProperty } from \"./parameters-convertor\";\nimport { convertScriptProperty } from \"./script-convertor\";\n\nexport type ActionPredicate = (action: DokAction) => boolean;\nexport type ActionConversionMap = [ActionPredicate, Convertor][];\n\nexport const DEFAULT_CONVERSION_MAP: ActionConversionMap = [\n    [({parameters}) => parameters !== undefined, convertParametersProperty],\n    [({loop}) => loop !== undefined, convertLoopProperty],\n    [({condition}) => condition !== undefined, convertConditionProperty],\n    [({log}) => log !== undefined, convertLogProperty],\n    [({script}) => script !== undefined, convertScriptProperty],\n    [({actions}) => actions !== undefined, convertActionsProperty],\n];\n\nexport const convertAction: Convertor = (\n        action,\n        stepResults: ExecutionStep[],\n        getSteps,\n        external = DEFAULT_EXTERNALS,\n        actionConversionMap = DEFAULT_CONVERSION_MAP): ConvertBehavior | undefined => {\n\n    for (let [predicate, convertor] of actionConversionMap) {\n        if (predicate(action)) {\n            if (convertor(action, stepResults, getSteps, external, actionConversionMap) === ConvertBehavior.SKIP_REMAINING) {\n                return;\n            }\n        }\n    }\n    return;\n}\n\nexport function convertScripts(\n        scripts: Script[],\n        external: Record<string, any> = DEFAULT_EXTERNALS,\n        actionConversionMap = DEFAULT_CONVERSION_MAP): Record<string, ExecutionStep[]> {\n    const scriptMap: Record<string, ExecutionStep[]> = {};\n    const getSteps = (name?: string) => name ? scriptMap[name] : [];\n    scripts.forEach(script => {\n        if (!scriptMap[script.name]) {\n            scriptMap[script.name] = [];\n        }\n        const scriptSteps = scriptMap[script.name];\n        script.actions.forEach(action => {\n            convertAction(action, scriptSteps, getSteps, external, actionConversionMap);\n        });\n    });\n    return scriptMap;\n}\n\nexport function executeScript(\n        scriptName: string,\n        parameters: ExecutionParameters = {},\n        scripts: Script[],\n        external: Record<string, any> = DEFAULT_EXTERNALS,\n        actionConversionMap = DEFAULT_CONVERSION_MAP): () => void {\n    const context: Context = {\n        parameters: [parameters],\n        cleanupActions: []\n    };\n    const scriptMap = convertScripts(scripts, external, actionConversionMap);\n    execute(scriptMap[scriptName], {}, context);\n    return () => {\n        context.cleanupActions!.forEach(action => action());\n        context.cleanupActions!.length = 0;\n    };\n}\n","import { Context } from \"../context/Context\";\nimport { DEFAULT_EXTERNALS } from \"../convertor/Convertor\";\nimport { ActionConversionMap, DEFAULT_CONVERSION_MAP, convertScripts } from \"../convertor/convert-action\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { Script, Tag, getScriptNamesByTags } from \"../scripts/Script\";\n\nexport interface LoopBehavior {\n    cleanupAfterLoop?: boolean;\n}\n\nexport class ScriptProcessor {\n    scripts: Script[];\n    scriptMap: Record<string, ExecutionStep[]>;\n    external: Record<string, any>;\n\n    constructor(scripts: Script[], external: Record<string, any> = DEFAULT_EXTERNALS, actionConversionMap: ActionConversionMap = DEFAULT_CONVERSION_MAP) {\n        this.scripts = scripts;\n        this.scriptMap = convertScripts(this.scripts, external, actionConversionMap);\n        this.external = external;\n    }\n\n    private createContext(): Context {\n        return {\n            parameters: [],\n            cleanupActions: [],\n            objectPool: [],\n        };\n    }\n\n    private createLoopCleanup(behavior: LoopBehavior, context: Context) {\n        const cleanupActions = context.cleanupActions;\n        return behavior.cleanupAfterLoop && cleanupActions ? () => {\n            for (let action of cleanupActions) {\n                action();\n            }\n            cleanupActions.length = 0;\n        } : () => {};\n    }\n\n    runByName(name: string): () => void {\n        const context: Context = this.createContext();\n        const steps = this.scriptMap[name];\n        execute(steps, {}, context);\n        return () => context.cleanupActions?.forEach(action => action());\n    }\n\n    runByTags(tags: Tag[]): () => void {\n        const context: Context = this.createContext();\n        const names = getScriptNamesByTags(this.scripts, tags);\n        const stepsGroups = names.map(name => this.scriptMap[name]);\n        stepsGroups.forEach(steps => execute(steps, {}, context));\n        return () => context.cleanupActions?.forEach(action => action());\n    }\n    \n    loopByName(name: string, behavior: LoopBehavior = {}): () => void {\n        const context: Context = this.createContext();\n        const parameters: ExecutionParameters = { time: 0 };\n        const steps = this.scriptMap[name];\n        const loopCleanup = this.createLoopCleanup(behavior, context);\n        const loop = (time: number) => {\n            parameters.time = time;\n            execute(steps, parameters, context);\n            loopCleanup();\n            animationFrameId = requestAnimationFrame(loop);\n        };\n        let animationFrameId = requestAnimationFrame(loop);\n        return () => {\n            context.cleanupActions?.forEach(action => action());\n            cancelAnimationFrame(animationFrameId);\n        }\n    }\n\n    loopByTags(tags: string[], behavior: LoopBehavior = {}) {\n        const context: Context = this.createContext();\n        const parameters: ExecutionParameters = { time: performance.now() - performance.timeOrigin };\n        const names = getScriptNamesByTags(this.scripts, tags);\n        const stepsGroups = names.map(name => this.scriptMap[name]);\n        const loopCleanup = this.createLoopCleanup(behavior, context);\n        const loop = (time: number) => {\n            parameters.time = time;\n            for (let steps of stepsGroups) {\n                execute(steps, parameters, context);\n            }\n            loopCleanup();\n            animationFrameId = requestAnimationFrame(loop);\n        };\n        let animationFrameId = requestAnimationFrame(loop);\n        return () => {\n            context.cleanupActions?.forEach(action => action());\n            cancelAnimationFrame(animationFrameId);\n        }\n    }\n}"],"names":["ConvertBehavior","DEFAULT_EXTERNALS","log","console","execute","steps","parameters","context","changedParameters","length","push","_iterator","_createForOfIteratorHelperLoose","_step","done","step","value","pop","hasFormula","resolution","isFormula","Array","isArray","some","item","formula","charAt","calculateEvaluator","evaluator","defaultValue","scope","_context$parameters","_evaluator$evaluate","evaluate","e","error","getFormulaEvaluator","Error","mathEvaluator","math","substring","compile","calculateNumber","undefined","valueOf","calculateTypedArray","ArrayConstructor","defaultNumberValue","Float32Array","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","array","compiledArray","map","i","bufferArray","BYTES_PER_ELEMENT","calculateArray","calculateResolution","evalItem","typeArrayResolution","calculateString","getByTags","scripts","tags","filter","script","every","tag","_script$tags","t","_script$tags2","getScriptNamesByTags","_ref","name","getByName","includes","convertActionsProperty","action","results","getSteps","external","_action$actions","actions","forEach","convertAction","calculateBoolean","convertConditionProperty","condition","SKIP_REMAINING","subAction","_objectWithoutPropertiesLoose","_excluded","conditionResolution","subStepResults","convertLogProperty","_","messages","resolutions","m","_external","apply","r","convertLoopProperty","stepResults","loop","loopResolution","numLoops","index","convertParametersProperty","paramResolutions","paramEntries","Object","entries","key","paramValues","_context$objectPool$p","_context$objectPool","objectPool","k","entry","_context$objectPool2","convertScriptProperty","DEFAULT_CONVERSION_MAP","_ref2","_ref3","_ref4","_ref5","_ref6","actionConversionMap","_step$value","predicate","convertor","convertScripts","scriptMap","scriptSteps","ScriptProcessor","_proto","prototype","createContext","cleanupActions","createLoopCleanup","behavior","cleanupAfterLoop","runByName","_context$cleanupActio","runByTags","names","stepsGroups","_this","_context$cleanupActio2","loopByName","time","loopCleanup","animationFrameId","requestAnimationFrame","_context$cleanupActio3","cancelAnimationFrame","loopByTags","performance","now","timeOrigin","_this2","_iterator2","_step2","_context$cleanupActio4"],"mappings":"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"}