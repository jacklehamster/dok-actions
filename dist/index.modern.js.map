{"version":3,"file":"index.modern.js","sources":["../src/core/convertor/Convertor.ts","../src/core/context/Context.ts","../src/core/execution/ExecutionStep.ts","../src/core/scripts/Script.ts","../src/core/convertor/convert-action.ts","../src/core/resolutions/calculateEvaluator.ts","../src/core/resolutions/calculateArray.ts","../src/core/resolutions/calculateMap.ts","../src/core/resolutions/calculate.ts","../src/core/resolutions/calculateNumber.ts","../src/core/resolutions/calculateString.ts","../src/core/resolutions/calculateBoolean.ts","../src/core/resolutions/calculateTypeArray.ts","../src/core/convertor/actions-convertor.ts","../src/core/convertor/condition-convertor.ts","../src/core/convertor/convert-pause.ts","../src/core/convertor/log-convertor.ts","../src/core/convertor/loop-convertor.ts","../src/core/convertor/parameters-convertor.ts","../src/core/convertor/script-convertor.ts","../src/core/convertor/default-convertors.ts","../src/core/processor/ScriptProcessor.ts"],"sourcesContent":["import { ExecutionStep } from \"../execution/ExecutionStep\";\nimport { ScriptFilter } from \"../scripts/Script\";\nimport { ActionConvertorList } from \"./convert-action\";\n\nexport type GetSteps = (filter: ScriptFilter) => ExecutionStep[];\n\nexport enum ConvertBehavior {\n    NONE,\n    SKIP_REMAINING_CONVERTORS,\n    SKIP_REMAINING_ACTIONS,\n}\n\nexport interface Utils<T> {\n    getSteps: GetSteps;\n    getRemainingActions: () => T[]; \n}\n\nexport type Convertor<T> = (action: T, results: ExecutionStep[], utils: Utils<T>, external: Record<string, any>, actionConversionMap: ActionConvertorList) => ConvertBehavior | void;\n\nexport const DEFAULT_EXTERNALS = {\n    log: console.log,\n    setTimeout,\n    clearTimeout,\n};\n","import { DEFAULT_EXTERNALS } from \"../convertor/Convertor\";\nimport { ExecutionParameters, ExecutionStep } from \"../execution/ExecutionStep\";\n\nexport interface Context<E = {}> {\n    parameters: ExecutionParameters[];\n    cleanupActions:(() => void)[];\n    objectPool: ExecutionParameters[];\n    postActionListener: Set<ExecutionStep>;\n    external: (E|{}) & typeof DEFAULT_EXTERNALS;\n    locked: boolean;\n}\n\nexport function createContext<E>({\n        parameters = [],\n        cleanupActions = [],\n        objectPool = [],\n        postActionListener = new Set(),\n        external = {},\n}: {\n    parameters?: ExecutionParameters[];\n    cleanupActions?:(() => void)[];\n    objectPool?: ExecutionParameters[];\n    postActionListener?: Set<ExecutionStep>;\n    external?: E | {};\n} = {}): Context<E|{}> {\n    return {\n        parameters,\n        cleanupActions,\n        objectPool,\n        postActionListener,\n        external: {...DEFAULT_EXTERNALS, ...external},\n        locked: false,\n    };\n}","import { Context, createContext } from \"../context/Context\";\nimport { SupportedTypes } from \"../resolutions/SupportedTypes\";\n\nexport type ExecutionParameters = Record<string, SupportedTypes>;\nexport type ExecutionStep = (context: Context, parameters: ExecutionParameters) => void;\n\nexport function execute(steps?: ExecutionStep[], parameters: ExecutionParameters = {}, context: Context = createContext()) {\n    if (!steps?.length) {\n        return;\n    }\n    if (!context.parameters) {\n        context.parameters = [];\n    }\n\n    const changedParameters = context.parameters[context.parameters.length-1] !== parameters;\n    if (changedParameters) {\n        context.parameters.push(parameters);\n    }\n    for (let step of steps) {\n        step(context, parameters);\n    }\n    context.postActionListener.forEach(listener => listener(context, parameters));\n\n    if (changedParameters) {\n        context.parameters.pop();\n    }\n}\n","import { DokAction } from \"../actions/Action\";\nimport { Resolution } from \"../resolutions/Resolution\";\n\nexport type Tag = string|[string, string|number|boolean];\n\nexport interface Script<T> {\n    name?: string;\n    parameters?: (string|[string, Resolution])[];\n    actions: (T & DokAction<T>)[];\n    tags?: Tag[];\n}\n\nexport interface ScriptFilter {\n    name?: string | string[];\n    tags?: Tag[];\n}\n\nfunction filterMatchesTags(filter: ScriptFilter, tags?: Tag[]) {\n    return filter.tags?.every(tag => {\n        if (typeof(tag) === \"string\") {\n            return tags?.some((t) => t === tag || (Array.isArray(t) && t[0] === tag));\n        } else {\n            return tags?.some((t) => Array.isArray(t) && t[0] === tag[0] && t[1] === tag[1]);\n        }\n    });\n}\n\nexport function filterScripts<T>(scripts: Script<T>[], filter: ScriptFilter): Script<T>[] {\n    const namesToFilter = !filter.name ? undefined : Array.isArray(filter.name) ? filter.name : [filter.name];\n    return scripts.filter(({name, tags}) => {\n        if (namesToFilter?.length && namesToFilter.indexOf(name ?? \"\") < 0) {\n            return false;\n        }    \n        if (filter.tags && !filterMatchesTags(filter, tags)) {\n            return false;\n        }\n        return true;\n    });\n}\n","import { Context, createContext } from \"../context/Context\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { Script, ScriptFilter, filterScripts } from \"../scripts/Script\";\nimport { ConvertBehavior, Convertor, DEFAULT_EXTERNALS, Utils } from \"./Convertor\";\n\nexport type ActionConvertorList = Convertor<any>[];\n\nexport function convertAction<T>(\n        action: T,\n        stepResults: ExecutionStep[],\n        utils: Utils<T>,\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): ConvertBehavior | undefined {\n    for (let convertor of actionConversionMap) {\n        const convertBehavior = convertor(action, stepResults, utils, external, actionConversionMap);\n        if (convertBehavior === ConvertBehavior.SKIP_REMAINING_CONVERTORS) {\n            return;\n        } else if (convertBehavior === ConvertBehavior.SKIP_REMAINING_ACTIONS) {\n            return convertBehavior;\n        }\n    }\n    return;    \n}\n\nexport function convertScripts<T>(\n        scripts: Script<T>[],\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): Map<Script<T>, ExecutionStep[]> {\n    const scriptMap: Map<Script<T>, ExecutionStep[]> = new Map();\n    const getSteps = (filter: ScriptFilter) => {\n        const filteredScripts = filterScripts(scripts, filter);\n        const steps: ExecutionStep[] = [];\n        filteredScripts.forEach(script => steps.push(...(scriptMap.get(script)??[])));\n        return steps;\n    };\n    scripts.forEach(script => {\n        if (!scriptMap.has(script)) {\n            scriptMap.set(script, []);\n        }\n        const scriptSteps = scriptMap.get(script) ?? [];\n        const { actions } = script;\n        for (let i = 0; i < actions.length; i++) {\n            const getRemainingActions = () => actions.slice(i + 1);\n            const convertBehavior = convertAction(actions[i], scriptSteps, {getSteps, getRemainingActions}, external, actionConversionMap);\n            if (convertBehavior === ConvertBehavior.SKIP_REMAINING_ACTIONS) {\n                break;\n            }\n        }\n    });\n    return scriptMap;\n}\n\nexport function executeScript<T>(\n        scriptName: string,\n        parameters: ExecutionParameters = {},\n        scripts: Script<T>[],\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): () => void {\n    const context: Context = createContext();\n    const scriptMap = convertScripts(scripts, external, actionConversionMap);\n    const script = scripts.find(({name}) => name === scriptName);\n    const steps = script ? scriptMap.get(script) : [];\n    execute(steps, parameters, context);\n    return () => {\n        context.cleanupActions!.forEach(action => action());\n        context.cleanupActions!.length = 0;\n    };\n}\n\nexport function executeAction<T>(\n        action: T,\n        parameters: ExecutionParameters,\n        context: Context,\n        utils: Utils<T>,\n        external: Record<string, any> = DEFAULT_EXTERNALS,\n        actionConversionMap: ActionConvertorList): void {\n    const results: ExecutionStep[] = [];\n    convertAction(action, results, utils, external, actionConversionMap);\n    execute(results, parameters, context);\n}","import * as math from \"mathjs\";\nimport { Context } from \"../context/Context\";\nimport { Expression, Formula } from \"./Formula\";\nimport { Resolution } from \"./Resolution\";\n\nexport function hasFormula(resolution: Resolution): boolean {\n    if (isFormula(resolution)) {\n        return true;\n    }\n    if (Array.isArray(resolution)) {\n        return resolution.some(item => hasFormula(item));\n    }\n    if (typeof (resolution) === \"object\") {\n        return hasFormula(Object.values(resolution));\n    }\n    return false;\n}\n\nexport function isFormula(value: Formula | Expression | any) {\n    if (!value) {\n        return false;\n    }\n    if (typeof(value) !== \"string\" && typeof(value) !== \"object\") {\n        return false;\n    }\n    const formula = typeof(value) === \"string\" ? value : value.formula;\n    return formula?.charAt(0) === \"{\" && formula?.charAt(formula.length-1) === \"}\";\n}\n\nexport function calculateEvaluator<T>(evaluator: math.EvalFunction, context: Context | undefined, formula: Formula | Expression, defaultValue: T): T {\n    const scope = context?.parameters?.[context.parameters.length - 1];\n    try {\n        return evaluator.evaluate(scope ?? {}) ?? defaultValue;\n    } catch (e) {\n        console.error(\"Error: \" + e + \" on formula: \" + formula + \", scope: \", scope);\n    }\n    return defaultValue;\n}\n\nexport function getFormulaEvaluator(value: Formula | Expression): math.EvalFunction {\n    if (!isFormula(value)) {\n        throw new Error(`Formula: ${value} must start and end with brackets.`);\n    }\n    const formula = typeof(value) === \"string\" ? value : value.formula;\n    const mathEvaluator = math.parse(formula.substring(1, formula.length - 1)).compile();\n    return mathEvaluator;\n}\n\n","import { Context } from \"../context/Context\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { ArrayResolution } from \"./ArrayResolution\";\nimport { calculateResolution } from \"./calculate\";\nimport { calculateEvaluator, getFormulaEvaluator, hasFormula, isFormula } from \"./calculateEvaluator\";\nimport { Expression, Formula } from \"./Formula\";\nimport { Resolution } from \"./Resolution\";\nimport { SupportedTypes } from \"./SupportedTypes\";\n\nexport function calculateArray(value: ArrayResolution): ValueOf<SupportedTypes> | undefined {\n    //  check if we have any resolution to perform\n    if (!hasFormula(value)) {\n        if (!Array.isArray(value)) {\n            throw new Error(\"value is not an array\");\n        }\n        const array = value as SupportedTypes[];\n        return { valueOf: () => array };\n    }\n    if (!value) {\n        return undefined;\n    }\n    if (isFormula(value)) {\n        const formula = value as (Formula|Expression);\n        const evaluator = getFormulaEvaluator(formula);\n        return {\n            valueOf(context?: Context): SupportedTypes[] | undefined {\n                return calculateEvaluator<SupportedTypes[] | undefined>(evaluator, context, formula, undefined);\n            }\n        };\n    }\n    const array = value as Resolution[]\n\n    const evaluator = array.map(resolution => calculateResolution(resolution));\n\n    return {\n        valueOf(context?: Context): SupportedTypes {\n            const value = evaluator.map(evalItem => evalItem?.valueOf(context));\n            return value;\n        }\n    };\n}","import { Context } from \"../context/Context\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { calculateResolution } from \"./calculate\";\nimport { calculateEvaluator, getFormulaEvaluator, hasFormula, isFormula } from \"./calculateEvaluator\";\nimport { Expression, Formula } from \"./Formula\";\nimport { MapResolution } from \"./MapResolution\";\nimport { Resolution } from \"./Resolution\";\nimport { SupportedTypes } from \"./SupportedTypes\";\n\nexport function calculateMap(value: MapResolution): ValueOf<{ [key:string]:SupportedTypes } | undefined> {\n    //  check if we have any resolution to perform\n    if (!hasFormula(value)) {\n        const map = value as {[key: string]:SupportedTypes}\n        return { valueOf: () => map };\n    }\n    if (isFormula(value)) {\n        const formula = value as (Formula|Expression);\n        const evaluator = getFormulaEvaluator(formula);\n        return {\n            valueOf(context?: Context): { [key:string]:SupportedTypes } | undefined {\n                return calculateEvaluator<{ [key:string]:SupportedTypes } | undefined>(evaluator, context, formula, undefined);\n            }\n        };\n    }\n    const map = value as {[key: string]:Resolution}\n    const evaluatorEntries = Object.entries(map).map(([key, resolution]) => [key, calculateResolution(resolution)]);\n\n    return {\n        valueOf(context?: Context): { [key:string]:SupportedTypes } | undefined {\n            return Object.fromEntries(evaluatorEntries.map(([key, evalItem]) => [key, evalItem?.valueOf(context)]));\n        }\n    };\n}","import { Context } from \"../context/Context\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { Resolution } from \"./Resolution\";\nimport { calculateArray } from \"./calculateArray\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./calculateEvaluator\";\nimport { SupportedTypes } from \"./SupportedTypes\";\nimport { calculateMap } from \"./calculateMap\";\n\nexport function calculateResolution(value: Resolution): ValueOf<SupportedTypes> | undefined {\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return undefined;\n            }\n        };\n    }\n    if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n        || value instanceof Int16Array || value instanceof Uint16Array\n        || value instanceof Int32Array || value instanceof Uint32Array) {\n        return value;\n    }\n    if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return value;\n    }\n    if (typeof(value) === \"string\" && (value.charAt(0) !== \"{\" || value.charAt(value.length-1) !== \"}\")) {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return calculateArray(value);\n    }\n    if (typeof(value) === \"object\") {\n        return calculateMap(value);\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(context?: Context): string | number | undefined {\n            return calculateEvaluator<string | number | undefined>(evaluator, context, value, undefined);\n        }\n    };\n}\n","import { ValueOf } from \"../types/ValueOf\";\nimport { Context } from \"../context/Context\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./calculateEvaluator\";\nimport { NumberResolution } from \"./NumberResolution\";\n\n\nexport function calculateNumber<T extends number = number>(value: NumberResolution<T>, defaultValue:T|0 = 0): ValueOf<T|0>|number {\n    if (typeof(value) === \"number\") {\n        return value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(context?: Context): T|0 {\n            return calculateEvaluator<T|0>(evaluator, context, value, defaultValue);\n        }\n    };\n}\n","import { Context } from \"../context/Context\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { StringResolution } from \"./StringResolution\";\nimport { calculateEvaluator, getFormulaEvaluator, isFormula } from \"./calculateEvaluator\";\n\nexport function calculateString<T extends string = string>(value: StringResolution<T>, defaultValue: T|\"\" = \"\"): ValueOf<T|\"\">|string {\n    if (typeof(value) === \"string\" && !isFormula(value)) {\n        return value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(context?: Context): T|\"\" {\n            return calculateEvaluator<T|\"\">(evaluator, context, value, defaultValue);\n        }\n    };\n\n}\n","import { ValueOf } from \"../types/ValueOf\";\nimport { Context } from \"../context/Context\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./calculateEvaluator\";\nimport { NumberResolution } from \"./NumberResolution\";\nimport { BooleanResolution } from \"./BooleanResolution\";\n\nexport function calculateBoolean(value: BooleanResolution | NumberResolution, defaultValue = false): ValueOf<boolean> {\n    if (typeof(value) === \"boolean\" || typeof(value) === \"number\") {\n        return !!value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(context?: Context): boolean {\n            return !!calculateEvaluator<boolean | number>(evaluator, context, value, defaultValue);\n        }\n    };\n}\n","import { Context } from \"../context/Context\";\nimport { TypedArray } from \"../types/TypedArray\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { calculateNumber } from \"./calculateNumber\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./calculateEvaluator\";\nimport { TypedArrayResolution } from \"./TypedArrayResolution\";\n\nexport interface TypedArrayConstructor {\n    new (size: number): TypedArray;\n    BYTES_PER_ELEMENT: number;\n}\n\nexport function calculateTypedArray(value: TypedArrayResolution, ArrayConstructor: TypedArrayConstructor = Float32Array): ValueOf<TypedArray | undefined> {\n    if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n        || value instanceof Int16Array || value instanceof Uint16Array\n        || value instanceof Int32Array || value instanceof Uint32Array) {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        const array = new ArrayConstructor(value.length);\n        const compiledArray = value.map(value => calculateNumber(value, 0));\n        return {\n            valueOf(context?: Context): TypedArray {\n                for (let i = 0; i < compiledArray.length; i++) {\n                    array[i] = compiledArray[i].valueOf(context);\n                }\n                return array;\n            }\n        };    \n    }\n    const formula = value;\n    const evaluator = getFormulaEvaluator(formula);\n    let bufferArray: TypedArray;\n    return {\n        valueOf(context?: Context): TypedArray | undefined {\n            const value = calculateEvaluator<TypedArray | number[] | undefined>(evaluator, context, formula, undefined);\n            if (!value) {\n                return undefined;\n            }\n            if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n                || value instanceof Int16Array || value instanceof Uint16Array\n                || value instanceof Int32Array || value instanceof Uint32Array) {\n                return value;\n            }\n            if (Array.isArray(value)) {\n                if (!bufferArray) {\n                    bufferArray = new ArrayConstructor(value.length);\n                }\n                bufferArray.set(value);\n                return bufferArray;\n            }\n        \n            if (typeof(value) === \"number\") {\n                if (!bufferArray) {\n                    bufferArray = new ArrayConstructor(value / ArrayConstructor.BYTES_PER_ELEMENT);\n                }\n                return bufferArray;\n            }\n\n            throw new Error(`Formula ${formula} doesnt't evaluate to a TypedArray.`);\n        }\n    };\n}","import { ActionsAction } from \"../actions/ActionsAction\";\nimport { ExecutionStep } from \"../execution/ExecutionStep\";\nimport { ConvertBehavior } from \"./Convertor\";\nimport { Utils } from \"./Convertor\";\nimport { ActionConvertorList, convertAction } from \"./convert-action\";\n\nexport function convertActionsProperty<T>(\n        action: ActionsAction<T>,\n        results: ExecutionStep[],\n        utils: Utils<T>,\n        external: Record<string, any>,\n        actionConvertorMap: ActionConvertorList): ConvertBehavior | void {\n    action.actions?.forEach(action => convertAction(action, results, utils, external, actionConvertorMap));\n}\n","import { ConvertBehavior, Utils } from \"./Convertor\";\nimport { ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { ActionConvertorList, convertAction } from \"./convert-action\";\nimport { calculateBoolean } from \"../resolutions/calculateBoolean\";\nimport { LogicAction } from \"../actions/LogicAction\";\n\nexport function convertConditionProperty<T>(\n        action: LogicAction,\n        results: ExecutionStep[],\n        utils: Utils<T & LogicAction>,\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): ConvertBehavior | void {\n    if (action.condition === undefined) {\n        return;\n    }\n    if (!action.condition) {\n        return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n    }\n    const { condition, ...subAction } = action;\n    const conditionResolution = calculateBoolean(condition);\n    const subStepResults: ExecutionStep[] = [];\n    convertAction(subAction, subStepResults, utils, external, actionConversionMap);\n    results.push((context, parameters) => {\n        if (conditionResolution.valueOf(context)) {\n            execute(subStepResults, parameters, context);\n        }\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;        \n}\n","import { PauseAction } from \"../actions/PauseAction\";\nimport { Context } from \"../context/Context\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { calculateBoolean } from \"../resolutions/calculateBoolean\";\nimport { calculateNumber } from \"../resolutions/calculateNumber\";\nimport { ConvertBehavior, Utils } from \"./Convertor\";\nimport { ActionConvertorList, convertAction } from \"./convert-action\";\n\nexport function convertDelayProperty<T>(\n        action: PauseAction,\n        results: ExecutionStep[],\n        utils: Utils<T & PauseAction>,\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): ConvertBehavior | void {\n    if (!action.delay) {\n        return;\n    }\n\n    const { delay, ...subAction } = action;\n    const delayAmount = calculateNumber(delay);\n    const postStepResults: ExecutionStep[] = [];\n    const remainingActions = utils.getRemainingActions();\n    convertAction(subAction, postStepResults, utils, external, actionConversionMap);\n    remainingActions.forEach(action => {\n        convertAction(action, postStepResults, utils, external, actionConversionMap);\n    });\n    const performPostSteps = (context: Context, parameters: ExecutionParameters) => {\n        execute(postStepResults, parameters, context);\n    }\n\n    results.push((context, parameters) => {\n        const timeout = external.setTimeout(performPostSteps, delayAmount.valueOf(context), context, parameters);\n        context.cleanupActions.push(() => clearTimeout(timeout));\n    });\n    return ConvertBehavior.SKIP_REMAINING_ACTIONS;\n}\n\nexport function convertPauseProperty<T>(\n        action: PauseAction,\n        results: ExecutionStep[],\n        utils: Utils<T & PauseAction>,\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): ConvertBehavior | void {\n    if (!action.pause) {\n        return;\n    }\n\n    const { pause, ...subAction } = action;\n    const pauseResolution = calculateBoolean(pause);\n    const postStepResults: ExecutionStep[] = [];\n    const remainingActions = utils.getRemainingActions();\n    convertAction(subAction, postStepResults, utils, external, actionConversionMap);\n    remainingActions.forEach(action => {\n        convertAction(action, postStepResults, utils, external, actionConversionMap);\n    });\n\n    const step: ExecutionStep = (context, parameters) => {\n        if (!pauseResolution.valueOf(context)) {\n            context.postActionListener.delete(step);\n            execute(postStepResults, parameters, context);\n        } else if (!context.postActionListener.has(step)) {\n            context.postActionListener.add(step);\n        }\n    };\n\n    results.push(step);\n    return ConvertBehavior.SKIP_REMAINING_ACTIONS;\n}\n\nexport function convertLockProperty<T>(\n        action: PauseAction,\n        results: ExecutionStep[],\n        utils: Utils<T & PauseAction>,\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): ConvertBehavior | void {\n    if (!action.lock && !action.unlock) {\n        return;\n    }\n\n    const { lock, unlock, ...subAction } = action;\n\n\n    if (unlock) {\n        const unlockResolution = calculateBoolean(unlock);\n        results.push((context) => {\n            if (unlockResolution.valueOf(context)) {\n                context.locked = false;\n            }\n        });\n    }\n\n    if (lock) {\n        const lockResolution = calculateBoolean(lock);\n        const postStepResults: ExecutionStep[] = [];\n        const remainingActions = utils.getRemainingActions();\n        convertAction(subAction, postStepResults, utils, external, actionConversionMap);\n        remainingActions.forEach(action => {\n            convertAction(action, postStepResults, utils, external, actionConversionMap);\n        });\n\n        results.push((context, parameters) => {\n            if (!lockResolution.valueOf(context)) {\n                execute(postStepResults, parameters, context);\n            } else {\n                context.locked = true;\n                const step: ExecutionStep = (context, parameters) => {\n                    if (!context.locked) {\n                        context.postActionListener.delete(step);\n                        execute(postStepResults, parameters, context);    \n                    }\n                };\n                context.postActionListener.add(step);\n            }\n        });\n        return ConvertBehavior.SKIP_REMAINING_ACTIONS;\n    }\n}","import { LogAction } from \"../actions/LogAction\";\nimport { ExecutionStep } from \"../execution/ExecutionStep\";\nimport { Resolution } from \"../resolutions/Resolution\";\nimport { calculateResolution } from \"../resolutions/calculate\";\nimport { Utils } from \"./Convertor\";\nimport { ActionConvertorList } from \"./convert-action\";\n\nexport function convertLogProperty<T>(\n        action: LogAction,\n        results: ExecutionStep[],\n        _: Utils<T>,\n        external: Record<string, any>,\n        __: ActionConvertorList) {\n    if (action.log === undefined) {\n        return;\n    }\n    const messages: Resolution[] = Array.isArray(action.log) ? action.log : [action.log];\n    const resolutions = messages.map(m => calculateResolution(m));\n    results.push((context)=> external.log(...resolutions.map(r => r?.valueOf(context))));    \n}\n","import { ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { ConvertBehavior, Utils } from \"./Convertor\";\nimport { calculateNumber } from \"../resolutions/calculateNumber\";\nimport { ActionConvertorList, convertAction } from \"./convert-action\";\nimport { LogicAction } from \"../actions/LogicAction\";\n\nexport function convertLoopProperty<T>(\n        action: LogicAction,\n        stepResults: ExecutionStep[],\n        utils: Utils<T & LogicAction>,\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): ConvertBehavior | void {\n    if (action.loop === undefined) {\n        return;\n    }\n    if (!action.loop) {\n        return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n    }\n    const { loop, ...subAction } = action;\n    const loopResolution = calculateNumber(loop, 0);\n    const subStepResults: ExecutionStep[] = [];\n    convertAction<LogicAction>(subAction, subStepResults, utils, external, actionConversionMap);\n    stepResults.push((context, parameters) => {\n        const numLoops = loopResolution.valueOf(context);\n        for (let i = 0; i < numLoops; i++) {\n            parameters.index = i;\n            execute(subStepResults, parameters, context);\n        }\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}\n","import { ConvertBehavior, Utils } from \"./Convertor\";\nimport { Resolution } from \"../resolutions/Resolution\";\nimport { calculateResolution } from \"../resolutions/calculate\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { ActionConvertorList, convertAction } from \"./convert-action\";\nimport { SupportedTypes } from \"../resolutions/SupportedTypes\";\nimport { ScriptAction } from \"../actions/ScriptAction\";\nimport { Context } from \"../context/Context\";\nimport { StringResolution } from \"../resolutions/StringResolution\";\nimport { calculateString } from \"../resolutions/calculateString\";\nimport { HookAction } from \"../actions/HookAction\";\n\nfunction newParams(context: Context): ExecutionParameters {\n    return context.objectPool?.pop() ?? {};\n}\n\nfunction recycleParams(context: Context, params: ExecutionParameters): void {\n    for (let k in params) {\n        delete params[k];\n    }\n    context.objectPool?.push(params);\n}\n\nexport function convertParametersProperty<T>(\n        action: ScriptAction,\n        results: ExecutionStep[],\n        utils: Utils<T & ScriptAction>,\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): ConvertBehavior | void {\n    if (!action.parameters) {\n        return;\n    }\n    const { parameters, ...subAction } = action;\n\n    const paramResolutions: Record<string, Resolution> = parameters;\n    const paramEntries: [string, ValueOf<SupportedTypes> | undefined][] = Object.entries(paramResolutions)\n        .map(([key, resolution]) => [key, calculateResolution(resolution)]);\n\n    const subStepResults: ExecutionStep[] = [];\n    convertAction(subAction, subStepResults, utils, external, actionConversionMap);\n\n    results.push((context, parameters) => {\n        const paramValues: ExecutionParameters = newParams(context);\n        for (let k in parameters) {\n            paramValues[k] = parameters[k];\n        }\n        for (let entry of paramEntries) {\n            const key: string = entry[0];\n            paramValues[key] = entry[1]?.valueOf(context);\n        }\n\n        execute(subStepResults, paramValues, context);\n\n        recycleParams(context, paramValues);\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}\n\nexport function convertHooksProperty<T>(\n        action: HookAction & T,\n        results: ExecutionStep[],\n        utils: Utils<T & HookAction>,\n        external: Record<string, any>,\n        actionConversionMap: ActionConvertorList): ConvertBehavior|void {\n    if (!action.hooks) {\n        return;\n    }\n    const { hooks, ...subAction } = action;\n\n    const hooksResolution: StringResolution[] = hooks;\n    const hooksValueOf: ValueOf<string>[] = hooksResolution.map(hook => calculateString(hook));\n\n    const subStepResults: ExecutionStep[] = [];\n    convertAction(subAction, subStepResults, utils, external, actionConversionMap);\n\n    results.push((context, parameters) => {\n        const paramValues: ExecutionParameters = newParams(context);\n        for (let k in parameters) {\n            paramValues[k] = parameters[k];\n        }\n        for (let hook of hooksValueOf) {\n            const h = hook.valueOf(context);\n            const x = external[h];\n            if (x) {\n                paramValues[h] = x;\n            }\n        }\n\n        execute(subStepResults, paramValues, context);\n\n        recycleParams(context, paramValues);\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}\n","import { ScriptAction } from \"../actions/ScriptAction\";\nimport { ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { ConvertBehavior, Utils } from \"./Convertor\";\nimport { ActionConvertorList } from \"./convert-action\";\n\nexport function convertScriptProperty<T>(\n        action: ScriptAction,\n        results: ExecutionStep[],\n        {getSteps}: Utils<T>,\n        _: Record<string, any>,\n        __: ActionConvertorList): ConvertBehavior|void {\n    if (!action.script || action.scriptTags?.length) {\n        return;\n    }\n    const steps = getSteps({ name: action.script, tags: action.scriptTags });\n    results.push((context, parameters) => execute(steps, parameters, context));\n}\n\n","import { convertActionsProperty } from \"./actions-convertor\";\nimport { convertConditionProperty } from \"./condition-convertor\";\nimport { ActionConvertorList } from \"./convert-action\";\nimport { convertDelayProperty, convertLockProperty, convertPauseProperty } from \"./convert-pause\";\nimport { convertLogProperty } from \"./log-convertor\";\nimport { convertLoopProperty } from \"./loop-convertor\";\nimport { convertHooksProperty, convertParametersProperty } from \"./parameters-convertor\";\nimport { convertScriptProperty } from \"./script-convertor\";\n\nexport function getDefaultConvertors(): ActionConvertorList {\n    return [\n        convertHooksProperty,\n        convertParametersProperty,\n        convertLoopProperty,\n        convertConditionProperty,\n        convertDelayProperty,\n        convertPauseProperty,\n        convertLockProperty,\n        convertLogProperty,\n        convertScriptProperty,\n        convertActionsProperty,\n    ];\n}\n","import { Context, createContext } from \"../context/Context\";\nimport { DEFAULT_EXTERNALS } from \"../convertor/Convertor\";\nimport { ActionConvertorList, convertScripts } from \"../convertor/convert-action\";\nimport { getDefaultConvertors } from \"../convertor/default-convertors\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { Script, ScriptFilter, Tag, filterScripts } from \"../scripts/Script\";\n\nexport interface LoopBehavior {\n    cleanupAfterLoop?: boolean;\n}\n\nexport class ScriptProcessor<T, E = {}> {\n    scripts: Script<T>[];\n    scriptMap: Map<Script<T>, ExecutionStep[]>;\n    external: (E|{}) & typeof DEFAULT_EXTERNALS;\n\n    constructor(scripts: Script<T>[], external = {}, actionConversionMap: ActionConvertorList = getDefaultConvertors()) {\n        this.scripts = scripts;\n        this.scriptMap = convertScripts(this.scripts, external, actionConversionMap);\n        this.external = {...DEFAULT_EXTERNALS, ...external};\n    }\n\n    private createLoopCleanup(behavior: LoopBehavior, context: Context) {\n        const cleanupActions = context.cleanupActions;\n        return behavior.cleanupAfterLoop && cleanupActions ? () => {\n            for (let cleanup of cleanupActions) {\n                cleanup();\n            }\n            cleanupActions.length = 0;\n        } : () => {};\n    }\n\n    getSteps(filter: ScriptFilter) {\n        const scripts = filterScripts(this.scripts, filter);\n        const steps: ExecutionStep[] = [];\n        scripts.forEach(script => this.scriptMap.get(script)?.forEach(step => steps.push(step)));\n        return steps;\n    }\n\n    runByName(name: string): () => void {\n        const context: Context = createContext();\n        execute(this.getSteps({ name }), undefined, context);\n        return () => context.cleanupActions?.forEach(action => action());\n    }\n\n    runByTags(tags: Tag[]): () => void {\n        const context: Context = createContext();\n        execute(this.getSteps({ tags }), undefined, context);\n        return () => context.cleanupActions?.forEach(action => action());\n    }\n\n    private loopWithFilter(filter: ScriptFilter, behavior: LoopBehavior = {}): () => void {\n        const context: Context = createContext();\n        const parameters: ExecutionParameters = { time: 0 };\n        const steps = this.getSteps(filter);\n        const loopCleanup = this.createLoopCleanup(behavior, context);\n        const loop = (time: number) => {\n            parameters.time = time;\n            execute(steps, parameters, context);\n            loopCleanup();\n            animationFrameId = requestAnimationFrame(loop);\n        };\n        let animationFrameId = requestAnimationFrame(loop);\n        return () => {\n            loopCleanup();\n            cancelAnimationFrame(animationFrameId);\n        }\n    }\n    \n    loopByName(name: string, behavior: LoopBehavior = {}): () => void {\n        return this.loopWithFilter({ name }, behavior);\n    }\n\n    loopByTags(tags: string[], behavior: LoopBehavior = {}) {\n        return this.loopWithFilter({ tags }, behavior);\n    }\n}"],"names":["ConvertBehavior","DEFAULT_EXTERNALS","log","console","setTimeout","clearTimeout","createContext","_temp","_ref$parameters","_ref","parameters","_ref$cleanupActions","cleanupActions","_ref$objectPool","objectPool","_ref$postActionListen","postActionListener","Set","_ref$external","external","_extends","locked","execute","steps","context","length","changedParameters","push","_iterator","_createForOfIteratorHelperLoose","_step","done","step","value","forEach","listener","pop","filterMatchesTags","filter","tags","_filter$tags","every","tag","some","t","Array","isArray","filterScripts","scripts","namesToFilter","name","undefined","indexOf","convertAction","action","stepResults","utils","actionConversionMap","convertor","convertBehavior","SKIP_REMAINING_CONVERTORS","SKIP_REMAINING_ACTIONS","convertScripts","scriptMap","Map","getSteps","filteredScripts","script","_scriptMap$get","apply","get","has","set","scriptSteps","_scriptMap$get2","actions","_loop","i","getRemainingActions","slice","_ret","executeScript","scriptName","find","executeAction","results","hasFormula","resolution","isFormula","item","Object","values","formula","charAt","calculateEvaluator","evaluator","defaultValue","scope","_context$parameters","_evaluator$evaluate","evaluate","e","error","getFormulaEvaluator","Error","mathEvaluator","math","substring","compile","calculateArray","array","valueOf","map","calculateResolution","evalItem","calculateMap","evaluatorEntries","entries","key","fromEntries","_ref2","Float32Array","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","calculateNumber","calculateString","calculateBoolean","calculateTypedArray","ArrayConstructor","compiledArray","bufferArray","BYTES_PER_ELEMENT","convertActionsProperty","actionConvertorMap","_action$actions","convertConditionProperty","condition","subAction","_objectWithoutPropertiesLoose","_excluded","conditionResolution","subStepResults","convertDelayProperty","delay","delayAmount","postStepResults","remainingActions","performPostSteps","timeout","convertPauseProperty","pause","_excluded2","pauseResolution","add","convertLockProperty","lock","unlock","_excluded3","unlockResolution","lockResolution","convertLogProperty","_","__","messages","resolutions","m","r","convertLoopProperty","loop","loopResolution","numLoops","index","newParams","_context$objectPool$p","_context$objectPool","recycleParams","params","k","_context$objectPool2","convertParametersProperty","paramResolutions","paramEntries","paramValues","_entry$","entry","convertHooksProperty","hooks","hooksResolution","hooksValueOf","hook","_iterator2","_step2","h","x","convertScriptProperty","_action$scriptTags","scriptTags","getDefaultConvertors","ScriptProcessor","_proto","prototype","createLoopCleanup","behavior","cleanupAfterLoop","cleanup","_this$scriptMap$get","_this","runByName","_context$cleanupActio","runByTags","_context$cleanupActio2","loopWithFilter","time","loopCleanup","animationFrameId","requestAnimationFrame","cancelAnimationFrame","loopByName","loopByTags"],"mappings":"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"}