{"version":3,"file":"index.modern.js","sources":["../src/core/convertor/default-externals.ts","../src/core/context/ObjectPool.ts","../src/core/context/Context.ts","../src/core/convertor/Convertor.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.mjs","../src/core/execution/ExecutionStep.ts","../src/core/scripts/Script.ts","../src/core/convertor/actions/convert-action.ts","../src/core/convertor/actions/parameter-utils.ts","../src/core/resolutions/formula/Formula.ts","../src/core/resolutions/formula/formula-utils.ts","../src/core/resolutions/formula/formula-evaluator.ts","../src/core/resolutions/calculateArray.ts","../src/core/resolutions/calculateMap.ts","../src/core/resolutions/calculateObjectResolution.ts","../src/core/resolutions/calculate.ts","../src/core/resolutions/calculateNumber.ts","../src/core/resolutions/calculateString.ts","../src/core/resolutions/calculateBoolean.ts","../src/core/resolutions/calculateTypeArray.ts","../src/core/convertor/actions/refresh-convertor.ts","../src/core/convertor/actions/actions-convertor.ts","../src/core/convertor/actions/callback-convertor.ts","../src/core/convertor/actions/condition-convertor.ts","../src/core/convertor/actions/convert-external-call.ts","../src/core/convertor/actions/convert-pause.ts","../src/core/convertor/actions/convert-set.ts","../src/core/convertor/actions/hooks-convertor.ts","../src/core/convertor/actions/log-convertor.ts","../src/core/convertor/actions/loop-convertor.ts","../src/core/convertor/actions/parameters-convertor.ts","../src/core/convertor/actions/script-convertor.ts","../src/core/convertor/default-convertors.ts","../src/core/processor/ScriptProcessor.ts"],"sourcesContent":["export const DEFAULT_EXTERNALS = {\n    log: console.log,\n    setTimeout,\n    clearTimeout,\n    fetch: global.fetch,\n};\n","export class ObjectPool<T> {\n    private factory: () => T;\n    private cleanup: (value: T) => void;\n    private pool: T[] = [];\n    constructor(factory: () => T, cleanup: (value: T) => void) {\n        this.factory = factory;\n        this.cleanup = cleanup;\n    }\n\n    generate(): T {\n        return this.pool.pop() ?? this.factory();\n    }\n\n    recycle(value: T) {\n        this.cleanup(value);\n        this.pool.push(value);\n    }\n}","import { DEFAULT_EXTERNALS } from \"../convertor/default-externals\";\nimport { ExecutionParameters, ExecutionStep } from \"../execution/ExecutionStep\";\nimport { ObjectPool } from \"./ObjectPool\";\n\nexport interface ExecutionWithParams {\n    steps: ExecutionStep[];\n    parameters: ExecutionParameters;\n}\n\nexport interface Context<E = {}> {\n    parameters: ExecutionParameters[];\n    cleanupActions:(() => void)[];\n    objectPool: ObjectPool<ExecutionParameters>;\n    postActionListener: Set<ExecutionWithParams>;\n    external: (E|{}) & typeof DEFAULT_EXTERNALS;\n    locked: boolean;\n}\n\nexport function createContext<E>({\n        parameters = [],\n        cleanupActions = [],\n        objectPool = new ObjectPool<ExecutionParameters>(() => ({}), value => {\n            for (let k in value) {\n                delete value[k];\n            }\n        }),\n        postActionListener = new Set(),\n        external = {},\n}: {\n    parameters?: ExecutionParameters[];\n    cleanupActions?:(() => void)[];\n    objectPool?: ObjectPool<ExecutionParameters>;\n    postActionListener?: Set<ExecutionWithParams>;\n    external?: E | {};\n} = {}): Context<E|{}> {\n    return {\n        parameters,\n        cleanupActions,\n        objectPool,\n        postActionListener,\n        external: {...DEFAULT_EXTERNALS, ...external},\n        locked: false,\n    };\n}\n\nexport function addPostAction(postAction: ExecutionWithParams, context: Context): void {\n    if (!context.postActionListener.has(postAction)) {\n        context.postActionListener.add(postAction);\n        context.cleanupActions.push(() => {\n            postAction.steps.forEach(step => step(postAction.parameters, context));\n        });    \n    }\n}\n\nexport function deletePostAction(postAction: ExecutionWithParams, context: Context): void {\n    context.postActionListener.delete(postAction);\n}\n\nexport function executePostActions(parameters: ExecutionParameters, context: Context): void {\n    context.postActionListener.forEach(listener => {\n        for (let i in parameters) {\n            listener.parameters[i] = parameters[i];\n        }\n        listener.steps.forEach(step => step(listener.parameters, context));\n    });\n}","import { Context } from \"../context/Context\";\nimport { ExecutionStep } from \"../execution/ExecutionStep\";\nimport { RefreshBehavior } from \"../processor/ScriptProcessor\";\nimport { ScriptFilter } from \"../scripts/Script\";\n\nexport type ActionConvertorList = Convertor<any>[];\n\nexport interface ConvertorSet {\n    actionsConvertor: ActionConvertorList,\n}\n\nexport type GetSteps = (filter: ScriptFilter) => ExecutionStep[];\n\nexport enum ConvertBehavior {\n    NONE,\n    SKIP_REMAINING_CONVERTORS,\n    SKIP_REMAINING_ACTIONS,\n}\n\nexport interface Utils<T> {\n    refreshSteps(steps: ExecutionStep[], loopBehavior?: RefreshBehavior, processId?: string): { cleanup: () => void; processId: string };\n    stopRefresh(processId?: string): void;\n    getSteps: GetSteps;\n    getRemainingActions: () => T[];\n    executeCallback?: Record<string, (context: Context) => void>;\n}\n\nexport type Convertor<T> = (action: T, results: ExecutionStep[], utils: Utils<T>, external: Record<string, any>, convertorSet: ConvertorSet) => Promise<ConvertBehavior | void>;\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { Context, createContext, executePostActions } from \"../context/Context\";\nimport { SupportedTypes } from \"../resolutions/SupportedTypes\";\n\nexport type ExecutionParameters = Record<string, SupportedTypes>;\nexport type ExecutionStep = (parameters: ExecutionParameters, context: Context) => void;\n\nexport function execute(steps?: ExecutionStep[], parameters: ExecutionParameters = {}, context: Context = createContext()) {\n    if (!steps?.length) {\n        return;\n    }\n    if (!context.parameters) {\n        context.parameters = [];\n    }\n\n    const params = context.parameters;\n    const changedParameters = params[params.length-1] !== parameters;\n    if (changedParameters) {\n        params.push(parameters);\n    }\n    for (let step of steps) {\n        step(parameters, context);\n    }\n    executePostActions(parameters, context);\n\n    if (changedParameters) {\n        params.pop();\n    }\n}\n","import { ActionList } from \"../actions/ActionsAction\";\n\nexport type Tag = string|[string, string|number|boolean];\n\nexport interface Script<T> {\n    name?: string;\n    actions: ActionList<T>;\n    tags?: Tag[];\n}\n\nexport interface ScriptFilter {\n    name?: string | string[];\n    tags?: Tag[];\n}\n\nfunction filterMatchesTags(filter: ScriptFilter, tags?: Tag[]) {\n    return filter.tags?.every(tag => {\n        if (typeof(tag) === \"string\") {\n            return tags?.some((t) => t === tag || (Array.isArray(t) && t[0] === tag));\n        } else {\n            return tags?.some((t) => Array.isArray(t) && t[0] === tag[0] && t[1] === tag[1]);\n        }\n    });\n}\n\nexport function filterScripts<T>(scripts: Script<T>[], filter: ScriptFilter): Script<T>[] {\n    const namesToFilter = !filter.name ? undefined : Array.isArray(filter.name) ? filter.name : [filter.name];\n    return scripts.filter(({name, tags}) => {\n        if (namesToFilter?.length && namesToFilter.indexOf(name ?? \"\") < 0) {\n            return false;\n        }    \n        if (filter.tags && !filterMatchesTags(filter, tags)) {\n            return false;\n        }\n        return true;\n    });\n}\n","import { Context, createContext } from \"../../context/Context\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../../execution/ExecutionStep\";\nimport { ScriptProcessorHelper } from \"../../processor/ScriptProcessor\";\nimport { Script, ScriptFilter, filterScripts } from \"../../scripts/Script\";\nimport { ConvertBehavior, ConvertorSet, Utils } from \"./../Convertor\";\n\nexport async function convertAction<T>(\n        action: T,\n        stepResults: ExecutionStep[],\n        utils: Utils<T>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    for (let convertor of convertorSet.actionsConvertor) {\n        const convertBehavior = await convertor(action, stepResults, utils, external, convertorSet);\n        if (convertBehavior === ConvertBehavior.SKIP_REMAINING_CONVERTORS) {\n            return;\n        } else if (convertBehavior === ConvertBehavior.SKIP_REMAINING_ACTIONS) {\n            return convertBehavior;\n        }\n    }\n    return;    \n}\n\nexport async function convertScripts<T>(\n        scripts: Script<T>[],\n        external: Record<string, any>,\n        convertorSet: ConvertorSet,\n        processorHelper: ScriptProcessorHelper): Promise<Map<Script<T>, ExecutionStep[]>> {\n    const scriptMap: Map<Script<T>, ExecutionStep[]> = new Map();\n    scripts.forEach(script => scriptMap.set(script, []));\n    const getSteps = (filter: ScriptFilter) => {\n        const filteredScripts = filterScripts(scripts, filter);\n        const steps: ExecutionStep[] = [];\n        filteredScripts.forEach(script => steps.push(...(scriptMap.get(script)!)));\n        return steps;\n    };\n    for (let script of scripts) {\n        const scriptSteps = scriptMap.get(script) ?? [];\n        const { actions } = script;\n        for (let i = 0; i < actions.length; i++) {\n            const getRemainingActions = () => actions.slice(i + 1);\n            const convertBehavior = await convertAction(actions[i], scriptSteps, {\n                getSteps, getRemainingActions, refreshSteps: processorHelper.refreshSteps, stopRefresh: processorHelper.stopRefresh,\n            }, external, convertorSet);\n            if (convertBehavior === ConvertBehavior.SKIP_REMAINING_ACTIONS) {\n                break;\n            }\n        }\n    }\n    return scriptMap;\n}\n\nexport async function executeScript<T>(\n        scriptName: string,\n        parameters: ExecutionParameters = {},\n        scripts: Script<T>[],\n        external: Record<string, any>,\n        convertorSet: ConvertorSet,\n        processorHelper: ScriptProcessorHelper): Promise<() => void> {\n    const context: Context = createContext();\n    const scriptMap = await convertScripts(scripts, external, convertorSet, processorHelper);\n    const script = scripts.find(({name}) => name === scriptName);\n    const steps = script ? scriptMap.get(script) : [];\n    execute(steps, parameters, context);\n    return () => {\n        context.cleanupActions!.forEach(action => action());\n        context.cleanupActions!.length = 0;\n    };\n}\n\nexport async function executeAction<T>(\n        action: T,\n        parameters: ExecutionParameters,\n        context: Context,\n        utils: Utils<T>,\n        convertorSet: ConvertorSet): Promise<void> {\n    const results: ExecutionStep[] = [];\n    if (ConvertBehavior.SKIP_REMAINING_ACTIONS !== await convertAction(action, results, utils, context.external, convertorSet)) {\n        execute(results, parameters, context);\n    }\n}","import { Context } from \"../../context/Context\";\nimport { ExecutionParameters } from \"../../execution/ExecutionStep\";\n\nexport function newParams(parameters: ExecutionParameters | undefined, context: Context): ExecutionParameters {\n    const params = context.objectPool.generate();\n    for (let k in parameters) {\n        params[k] = parameters[k];\n    }    \n    return params;\n}\n\nexport function recycleParams(params: ExecutionParameters, context: Context): void {\n    context.objectPool.recycle(params);\n}\n\n","export const FORMULA_SEPARATORS = [\"~\", \"{\", \"}\"];   //  formula separator\n\nexport type Formula = string\n","import { Resolution } from \"../Resolution\";\nimport { FORMULA_SEPARATORS, Formula } from \"./Formula\";\n\nexport function hasFormula(resolution: Resolution): boolean {\n    if (isFormula(resolution)) {\n        return true;\n    }\n    if (Array.isArray(resolution)) {\n        return resolution.some(item => hasFormula(item));\n    }\n    if (resolution && typeof (resolution) === \"object\") {\n        return hasFormula(Object.values(resolution)) || hasFormula(Object.keys(resolution));\n    }\n    return false;\n}\n\nexport function isFormula(value: Formula | any) {\n    if (!value) {\n        return false;\n    }\n    if (typeof(value) !== \"string\" && typeof(value) !== \"object\") {\n        return false;\n    }\n    const formula = typeof(value) === \"string\" ? value : value.formula;\n    const [startCharacter, prefix, suffix] = FORMULA_SEPARATORS.map(char => formula?.indexOf(char));\n    return startCharacter === 0 && prefix > startCharacter && suffix > prefix;\n}\n\ninterface FormulaChunk {\n    formula: Formula;\n    textSuffix: string;\n}\n\nexport function getInnerFormulas(formula: Formula): FormulaChunk[] {\n    const [startCharacter, prefix, suffix] = FORMULA_SEPARATORS;\n\n    //  parse formulas out. Formulas have format like this: ~{formula}text{formula}.\n    return formula.substring(startCharacter.length).split(prefix).map((chunk, index) => {\n        if (index === 0) {\n            return { textSuffix: chunk, formula: \"\" };\n        }\n        const [formula, textSuffix] = chunk.split(suffix);\n        return { formula, textSuffix };\n    }).filter(({ textSuffix, formula}) => textSuffix.length || formula.length);\n}\n\nconst IDENTIFIER_REGEX = /^([^\\x00-\\x7F]|[A-Za-z_])([^\\x00-\\x7F]|\\w)+$/;\n\nexport function isSimpleInnerFormula(innerFormula: string) {\n    return IDENTIFIER_REGEX.test(innerFormula);\n}\n\n","import * as math from \"mathjs\";\nimport { FORMULA_SEPARATORS, Formula } from \"./Formula\";\nimport { getInnerFormulas, isFormula, isSimpleInnerFormula } from \"./formula-utils\";\nimport { ExecutionParameters } from \"../../execution/ExecutionStep\";\n\nexport function calculateEvaluator<T>(evaluator: math.EvalFunction, parameters: ExecutionParameters = {}, formula: Formula, defaultValue: T): T {\n    const scope = parameters;\n    try {\n        return evaluator.evaluate(scope ?? {}) ?? defaultValue;\n    } catch (e) {\n        console.error(\"Error: \" + e + \" on formula: \" + formula + \", scope: \", JSON.parse(JSON.stringify(scope)));\n    }\n    return defaultValue;\n}\n\nfunction getEvaluator(formula: string): math.EvalFunction {\n    if (!formula.length) {\n        return {\n            evaluate: () => \"\",\n        };\n    }\n    const mathEvaluator = math.parse(formula).compile();\n    if (isSimpleInnerFormula(formula)) {\n        return {\n            evaluate(scope?: any) {\n                return scope[formula] ?? mathEvaluator.evaluate(scope);\n            },\n        };\n    }\n    return mathEvaluator;    \n}\n\nexport function getFormulaEvaluator(value: Formula): math.EvalFunction {\n    if (!isFormula(value)) {\n        throw new Error(`Formula: ${value} must match the format: \"${FORMULA_SEPARATORS[0]}formula${FORMULA_SEPARATORS[1]}\".`);\n    }\n    const values = getInnerFormulas(value);\n    if (values.length === 1 && !values[0].textSuffix.length) {\n        return getEvaluator(values[0].formula);\n    } else {\n        const evaluators = values.map(({ formula, textSuffix }) => {\n            return { mathEvaluator: getEvaluator(formula), textSuffix};\n        });\n\n        return {\n            evaluate(scope?: any) {\n                return evaluators.map(({ mathEvaluator, textSuffix }) => {\n                    return mathEvaluator.evaluate(scope) + textSuffix;\n                }).join(\"\");\n            },\n        };\n    }\n}\n\n","import { ValueOf } from \"../types/ValueOf\";\nimport { ArrayResolution } from \"./ArrayResolution\";\nimport { calculateResolution } from \"./calculate\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./formula/formula-evaluator\";\nimport { Formula } from \"./formula/Formula\";\nimport { Resolution } from \"./Resolution\";\nimport { SupportedTypes } from \"./SupportedTypes\";\nimport { hasFormula, isFormula } from \"./formula/formula-utils\";\nimport { ExecutionParameters } from \"../execution/ExecutionStep\";\n\nexport function calculateArray(value: ArrayResolution): ValueOf<SupportedTypes[] | undefined> | undefined {\n    //  check if we have any resolution to perform\n    if (!hasFormula(value)) {\n        if (!Array.isArray(value)) {\n            throw new Error(\"value is not an array\");\n        }\n        const array = value as SupportedTypes[];\n        return { valueOf: () => array };\n    }\n    if (!value) {\n        return undefined;\n    }\n    if (isFormula(value)) {\n        const formula = value as Formula;\n        const evaluator = getFormulaEvaluator(formula);\n        return {\n            valueOf(parameters: ExecutionParameters): SupportedTypes[] | undefined {\n                return calculateEvaluator<SupportedTypes[] | undefined>(evaluator, parameters, formula, undefined);\n            }\n        };\n    }\n    const array = value as Resolution[]\n\n    const evaluator = array.map(resolution => calculateResolution(resolution));\n\n    return {\n        valueOf(parameters: ExecutionParameters): SupportedTypes[] {\n            return evaluator.map(evalItem => evalItem?.valueOf(parameters));\n        }\n    };\n}","import { ValueOf } from \"../types/ValueOf\";\nimport { calculateResolution } from \"./calculate\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./formula/formula-evaluator\";\nimport { Formula } from \"./formula/Formula\";\nimport { MapResolution } from \"./MapResolution\";\nimport { Resolution } from \"./Resolution\";\nimport { SupportedTypes } from \"./SupportedTypes\";\nimport { hasFormula, isFormula } from \"./formula/formula-utils\";\nimport { ExecutionParameters } from \"../execution/ExecutionStep\";\n\nexport function calculateMap(value: MapResolution): ValueOf<{ [key:string]:SupportedTypes } | undefined> {\n    //  check if we have any resolution to perform\n    if (!hasFormula(value)) {\n        const map = value as {[key: string]:SupportedTypes}\n        return { valueOf: () => map };\n    }\n    if (isFormula(value)) {\n        const formula = value as Formula;\n        const evaluator = getFormulaEvaluator(formula);\n        return {\n            valueOf(parameters: ExecutionParameters): { [key:string]:SupportedTypes } | undefined {\n                return calculateEvaluator<{ [key:string]:SupportedTypes } | undefined>(evaluator, parameters, formula, undefined);\n            }\n        };\n    }\n    const map = value as {[key: string]:Resolution}\n    const evaluatorEntries = Object.entries(map).map(([key, resolution]) => [key, calculateResolution(resolution)]);\n\n    return {\n        valueOf(parameters: ExecutionParameters): { [key:string]:SupportedTypes } | undefined {\n            return Object.fromEntries(evaluatorEntries.map(([key, evalItem]) => [key, evalItem?.valueOf(parameters)]));\n        }\n    };\n}","import { ValueOf } from \"../types/ValueOf\";\nimport { calculateResolution } from \"./calculate\";\nimport { ObjectResolution } from \"./ObjectResolution\";\n\nexport function calculateObject(value: ObjectResolution): ValueOf<any | undefined> {\n    const subject = calculateResolution(value.subject);\n    const access = (value.access ?? []).map(key => calculateResolution(key));\n\n    return {\n        valueOf(parameters) {\n            let node = subject?.valueOf(parameters);\n            const keys = access.map(key => key?.valueOf(parameters));\n            for (let key of keys) {\n                if (Array.isArray(node)) {\n                    if (typeof key === \"number\") {\n                        node = node?.[key];\n                    } else {\n                        return undefined;\n                    }\n                } else if (typeof key === \"string\" && typeof(node) === \"object\") {\n                    node = (node as Record<string, any>)?.[key];\n                } else {\n                    return undefined;\n                }\n            }\n            return node;\n        },\n    };\n}","import { ValueOf } from \"../types/ValueOf\";\nimport { Resolution } from \"./Resolution\";\nimport { calculateArray } from \"./calculateArray\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./formula/formula-evaluator\";\nimport { SupportedTypes } from \"./SupportedTypes\";\nimport { calculateMap } from \"./calculateMap\";\nimport { isFormula } from \"./formula/formula-utils\";\nimport { ExecutionParameters } from \"../execution/ExecutionStep\";\nimport { calculateObject } from \"./calculateObjectResolution\";\nimport { ObjectResolution } from \"./ObjectResolution\";\n\nexport function calculateResolution(value: Resolution): ValueOf<SupportedTypes> | undefined | null {\n    if (!value) {\n        return {\n            valueOf() {\n                return value;\n            }\n        };\n    }\n    if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n        || value instanceof Int16Array || value instanceof Uint16Array\n        || value instanceof Int32Array || value instanceof Uint32Array) {\n        return value;\n    }\n    if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return value;\n    }\n    if (typeof(value) === \"string\" && !isFormula(value)) {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return calculateArray(value);\n    }\n    if (typeof(value) === \"object\") {\n        if (value.subject) {\n            return calculateObject(value as ObjectResolution);\n        }\n        return calculateMap(value);\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(parameters: ExecutionParameters = {}): SupportedTypes {\n            return calculateEvaluator<SupportedTypes>(evaluator, parameters, value, undefined);\n        }\n    };\n}\n","import { ValueOf } from \"../types/ValueOf\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./formula/formula-evaluator\";\nimport { NumberResolution } from \"./NumberResolution\";\nimport { ExecutionParameters } from \"../execution/ExecutionStep\";\n\n\nexport function calculateNumber<T extends number = number>(value: NumberResolution<T>, defaultValue:T|0 = 0): ValueOf<T|0>|number {\n    if (typeof(value) === \"number\") {\n        return value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(parameters?: ExecutionParameters): T|0 {\n            return calculateEvaluator<T|0>(evaluator, parameters, value, defaultValue);\n        }\n    };\n}\n","import { ExecutionParameters } from \"../execution/ExecutionStep\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { StringResolution } from \"./StringResolution\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./formula/formula-evaluator\";\nimport { isFormula } from \"./formula/formula-utils\";\n\nexport function calculateString<T extends string = string>(value: StringResolution<T>, defaultValue: T|\"\" = \"\"): ValueOf<T|\"\">|string {\n    if (typeof(value) === \"string\" && !isFormula(value)) {\n        return value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(parameters: ExecutionParameters): T|\"\" {\n            return calculateEvaluator<T|\"\">(evaluator, parameters, value, defaultValue);\n        }\n    };\n\n}\n","import { ValueOf } from \"../types/ValueOf\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./formula/formula-evaluator\";\nimport { NumberResolution } from \"./NumberResolution\";\nimport { BooleanResolution } from \"./BooleanResolution\";\nimport { ExecutionParameters } from \"../execution/ExecutionStep\";\n\nexport function calculateBoolean(value: BooleanResolution | NumberResolution, defaultValue = false): ValueOf<boolean> {\n    if (typeof(value) === \"boolean\" || typeof(value) === \"number\") {\n        return !!value;\n    }\n    if (value === undefined) {\n        return {\n            valueOf() {\n                return defaultValue;\n            }\n        };\n    }\n    const evaluator = getFormulaEvaluator(value);\n    return {\n        valueOf(parameters: ExecutionParameters): boolean {\n            return !!calculateEvaluator<boolean | number>(evaluator, parameters, value, defaultValue);\n        }\n    };\n}\n","import { ExecutionParameters } from \"../execution/ExecutionStep\";\nimport { TypedArray } from \"../types/TypedArray\";\nimport { ValueOf } from \"../types/ValueOf\";\nimport { calculateNumber } from \"./calculateNumber\";\nimport { calculateEvaluator, getFormulaEvaluator } from \"./formula/formula-evaluator\";\nimport { TypedArrayResolution } from \"./TypedArrayResolution\";\n\nexport interface TypedArrayConstructor {\n    new (size: number): TypedArray;\n    BYTES_PER_ELEMENT: number;\n}\n\nexport function calculateTypedArray(value: TypedArrayResolution, ArrayConstructor: TypedArrayConstructor = Float32Array): ValueOf<TypedArray | undefined> {\n    if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n        || value instanceof Int16Array || value instanceof Uint16Array\n        || value instanceof Int32Array || value instanceof Uint32Array) {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        const array = new ArrayConstructor(value.length);\n        const compiledArray = value.map(value => calculateNumber(value, 0));\n        return {\n            valueOf(parameters: ExecutionParameters): TypedArray {\n                for (let i = 0; i < compiledArray.length; i++) {\n                    array[i] = compiledArray[i].valueOf(parameters);\n                }\n                return array;\n            }\n        };    \n    }\n    const formula = value;\n    const evaluator = getFormulaEvaluator(formula);\n    let bufferArray: TypedArray;\n    return {\n        valueOf(parameters: ExecutionParameters): TypedArray | undefined {\n            const value = calculateEvaluator<TypedArray | number[] | undefined>(evaluator, parameters, formula, undefined);\n            if (!value) {\n                return undefined;\n            }\n            if (value instanceof Float32Array || value instanceof Int8Array || value instanceof Uint8Array\n                || value instanceof Int16Array || value instanceof Uint16Array\n                || value instanceof Int32Array || value instanceof Uint32Array) {\n                return value;\n            }\n            if (Array.isArray(value)) {\n                if (!bufferArray) {\n                    bufferArray = new ArrayConstructor(value.length);\n                }\n                bufferArray.set(value);\n                return bufferArray;\n            }\n        \n            if (typeof(value) === \"number\") {\n                if (!bufferArray) {\n                    bufferArray = new ArrayConstructor(value / ArrayConstructor.BYTES_PER_ELEMENT);\n                }\n                return bufferArray;\n            }\n\n            throw new Error(`Formula ${formula} doesnt't evaluate to a TypedArray.`);\n        }\n    };\n}","import { ExecutionStep } from \"../../execution/ExecutionStep\";\nimport { ConvertBehavior, ConvertorSet, Utils } from \"../Convertor\";\nimport { calculateNumber } from \"../../resolutions/calculateNumber\";\nimport { convertAction } from \"./convert-action\";\nimport { RefreshAction } from \"../../actions/RefreshAction\";\nimport { calculateBoolean } from \"../../resolutions/calculateBoolean\";\nimport { calculateString } from \"../../resolutions/calculateString\";\n\nexport const DEFAULT_REFRESH_FRAME_RATE = 1;\n\nexport async function convertRefreshProperty<T>(\n        action: T & RefreshAction,\n        stepResults: ExecutionStep[],\n        utils: Utils<T & RefreshAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (!action.refresh) {\n        return;\n    }\n    const { refresh, ...subAction } = action;\n    const subStepResults: ExecutionStep[] = [];\n    const processIdValue = calculateString(refresh.processId, \"\");\n    const stop = calculateBoolean(refresh.stop);\n    const cleanupAfterRefresh = calculateBoolean(refresh.cleanupAfterRefresh);\n    const frameRate = calculateNumber(refresh.frameRate, DEFAULT_REFRESH_FRAME_RATE);\n    await convertAction<RefreshAction>(subAction, subStepResults, utils, external, convertorSet);\n\n    stepResults.push((parameters, context) => {\n        if (stop.valueOf(parameters)) {\n            utils.stopRefresh(processIdValue.valueOf(parameters));\n        } else {\n            const {cleanup, processId} = utils.refreshSteps(subStepResults, {\n                cleanupAfterRefresh: cleanupAfterRefresh.valueOf(parameters),\n                frameRate: frameRate.valueOf(parameters),\n                parameters,\n            }, processIdValue.valueOf(parameters));\n            parameters.processId = processId;\n            context.cleanupActions.push(cleanup);\n        }\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}\n","import { ActionList, ActionsAction } from \"../../actions/ActionsAction\";\nimport { ExecutionStep } from \"../../execution/ExecutionStep\";\nimport { ConvertBehavior, ConvertorSet, Utils } from \"../Convertor\";\nimport { convertAction } from \"./convert-action\";\n\nexport async function convertActions<T>(\n        actions: ActionList<T>,\n        results: ExecutionStep[],\n        utils: Utils<T & ActionsAction<T>>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet) {\n    for (let a of actions) {\n        if (Array.isArray(a)) {\n            await convertActions(a, results, utils, external, convertorSet);\n        } else {\n            await convertAction(a, results, utils, external, convertorSet);\n        }\n    }\n}\n\nexport async function convertActionsProperty<T>(\n        action: ActionsAction<T>,\n        results: ExecutionStep[],\n        utils: Utils<T & ActionsAction<T>>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (!action.actions?.length) {\n        return;\n    }\n    await convertActions(action.actions, results, utils, external, convertorSet);\n}\n","import { ActionsAction } from \"../../actions/ActionsAction\";\nimport { CallbackAction } from \"../../actions/CallbackAction\";\nimport { Context } from \"../../context/Context\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../../execution/ExecutionStep\";\nimport { calculateString } from \"../../resolutions/calculateString\";\nimport { ConvertBehavior, ConvertorSet, Utils } from \"../Convertor\";\nimport { convertActions } from \"./actions-convertor\";\nimport { convertAction } from \"./convert-action\";\nimport { newParams, recycleParams } from \"./parameter-utils\";\n\nexport async function convertCallbackProperty<T>(\n        action: CallbackAction<T>,\n        results: ExecutionStep[],\n        utils: Utils<T & CallbackAction<T>>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (!action.callback) {\n        return;\n    }\n    const { callback, ...subAction } = action;\n\n    const callbackParameters: Record<string, ExecutionParameters | undefined> = {};\n    const executeCallback: Utils<T & CallbackAction<T>>[\"executeCallback\"] = { ...utils.executeCallback};\n    for (const key in callback) {\n        const callbackSteps: ExecutionStep[] = [];\n        await convertActions(callback[key], callbackSteps, utils, external, convertorSet);\n\n        const onCallback = callbackSteps.length ? (context?: Context) => { \n            execute(callbackSteps, callbackParameters[key], context);\n            for (let i in callbackParameters[key]) {\n                delete callbackParameters[key]?.[i];\n            }\n            if (callbackParameters && context) {\n                recycleParams(callbackParameters, context);\n                callbackParameters[key] = undefined;  \n            }\n        } : () => {};\n        executeCallback[key] = onCallback;\n    }\n\n    const subStepResults: ExecutionStep[] = [];\n    await convertAction(subAction, subStepResults, { ...utils, executeCallback }, external, convertorSet);\n    results.push((parameters, context) => {\n        for (const key in callback) {\n            callbackParameters[key] = newParams(parameters, context);\n        }\n        execute(subStepResults, parameters, context);\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}\n\nexport async function convertExecuteCallbackProperty<T>(\n        action: CallbackAction<T>,\n        results: ExecutionStep[],\n        utils: Utils<T & ActionsAction<T>>): Promise<ConvertBehavior | void> {\n    if (!action.executeCallback) {\n        return;\n    }\n    const { executeCallback } = action;\n    const callbackToExecute = calculateString(executeCallback);\n    results.push((parameters, context) => {\n        const callbackName = callbackToExecute.valueOf(parameters);\n        utils.executeCallback?.[callbackName]?.(context);\n    });\n}","import { ConvertBehavior, ConvertorSet, Utils } from \"../Convertor\";\nimport { ExecutionStep, execute } from \"../../execution/ExecutionStep\";\nimport { convertAction } from \"./convert-action\";\nimport { calculateBoolean } from \"../../resolutions/calculateBoolean\";\nimport { LogicAction } from \"../../actions/LogicAction\";\n\nexport async function convertConditionProperty<T>(\n        action: LogicAction,\n        results: ExecutionStep[],\n        utils: Utils<T & LogicAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (action.condition === undefined) {\n        return;\n    }\n    if (!action.condition) {\n        return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n    }\n    const { condition, ...subAction } = action;\n    const conditionResolution = calculateBoolean(condition);\n    const subStepResults: ExecutionStep[] = [];\n    await convertAction(subAction, subStepResults, utils, external, convertorSet);\n    results.push((parameters, context) => {\n        if (conditionResolution.valueOf(parameters)) {\n            execute(subStepResults, parameters, context);\n        }\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;        \n}\n","import { ExternalAction } from \"../../actions/ExternalAction\";\nimport { ExecutionStep } from \"../../execution/ExecutionStep\";\nimport { Resolution } from \"../../resolutions/Resolution\";\nimport { calculateResolution } from \"../../resolutions/calculate\";\nimport { calculateString } from \"../../resolutions/calculateString\";\nimport { ConvertBehavior, Utils } from \"../Convertor\";\n\nexport async function convertExternalCallProperty<T>(\n        action: ExternalAction,\n        results: ExecutionStep[],\n        _: Utils<T & ExternalAction>,\n        external: Record<string, any>): Promise<ConvertBehavior|void> {\n    if (action.callExternal === undefined) {\n        return;\n    }\n    const { callExternal } = action;\n    const subjectResolution = calculateResolution(callExternal.subject);\n    const methodResolution = calculateString(callExternal.method);\n    const args: Resolution[] = !callExternal.arguments ? [] : Array.isArray(callExternal.arguments) ? callExternal.arguments : [callExternal.arguments];\n    const argsValues = args.map(m => calculateResolution(m));\n    results.push((parameters)=> {\n        const subject = subjectResolution?.valueOf(parameters) ?? external;\n        if (subject && typeof(subject) === \"object\" && !Array.isArray(subject)) {\n            const s = subject as Record<string, any>;\n            const method = methodResolution?.valueOf(parameters);\n            const m = s[method];\n            if (typeof(m) === \"function\") {\n                m.apply(s, argsValues.map(r => r?.valueOf(parameters)));\n            }    \n        }\n    });\n}\n","import { PauseAction } from \"../../actions/PauseAction\";\nimport { Context, ExecutionWithParams, addPostAction, deletePostAction } from \"../../context/Context\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../../execution/ExecutionStep\";\nimport { calculateBoolean } from \"../../resolutions/calculateBoolean\";\nimport { calculateNumber } from \"../../resolutions/calculateNumber\";\nimport { ConvertBehavior, ConvertorSet, Utils } from \"../Convertor\";\nimport { convertAction } from \"./convert-action\";\n\nexport async function convertDelayProperty<T>(\n        action: PauseAction,\n        results: ExecutionStep[],\n        utils: Utils<T & PauseAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (!action.delay) {\n        return;\n    }\n\n    const { delay, ...subAction } = action;\n    const delayAmount = calculateNumber(delay);\n    const postStepResults: ExecutionStep[] = [];\n    const remainingActions = utils.getRemainingActions();\n    await convertAction(subAction, postStepResults, utils, external, convertorSet);\n    for (let action of remainingActions) {\n        await convertAction(action, postStepResults, utils, external, convertorSet);\n    }\n    const performPostSteps = (context: Context, parameters: ExecutionParameters) => {\n        execute(postStepResults, parameters, context);\n    }\n\n    results.push((parameters, context) => {\n        const timeout = external.setTimeout(performPostSteps, delayAmount.valueOf(parameters), context, parameters);\n        context.cleanupActions.push(() => clearTimeout(timeout));\n    });\n    return ConvertBehavior.SKIP_REMAINING_ACTIONS;\n}\n\nexport async function convertPauseProperty<T>(\n        action: PauseAction,\n        results: ExecutionStep[],\n        utils: Utils<T & PauseAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (!action.pause) {\n        return;\n    }\n\n    const { pause, ...subAction } = action;\n    const pauseResolution = calculateBoolean(pause);\n    const postStepResults: ExecutionStep[] = [];\n    const remainingActions = utils.getRemainingActions();\n    await convertAction(subAction, postStepResults, utils, external, convertorSet);\n    for (let action of remainingActions) {\n        await convertAction(action, postStepResults, utils, external, convertorSet);\n    }\n\n    const step: ExecutionStep = (parameters, context) => {\n        for (let i in parameters) {\n            postExecution.parameters[i] = parameters[i];\n        }\n        if (!pauseResolution.valueOf(postExecution.parameters)) {\n            deletePostAction(postExecution, context);\n            execute(postStepResults, postExecution.parameters, context);\n        } else {\n            addPostAction(postExecution, context);\n        }\n    };\n\n    const postExecution: ExecutionWithParams = {\n        steps: [step],\n        parameters: {},\n    };\n\n    results.push(step);\n    return ConvertBehavior.SKIP_REMAINING_ACTIONS;\n}\n\nexport async function convertLockProperty<T>(\n        action: PauseAction,\n        results: ExecutionStep[],\n        utils: Utils<T & PauseAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (!action.lock && !action.unlock) {\n        return;\n    }\n\n    const { lock, unlock, ...subAction } = action;\n\n\n    if (unlock) {\n        const unlockResolution = calculateBoolean(unlock);\n        results.push((parameters, context) => {\n            if (unlockResolution.valueOf(parameters)) {\n                context.locked = false;\n            }\n        });\n    }\n\n    if (lock) {\n        const lockResolution = calculateBoolean(lock);\n        const postStepResults: ExecutionStep[] = [];\n        const remainingActions = utils.getRemainingActions();\n        await convertAction(subAction, postStepResults, utils, external, convertorSet);\n        for (let action of remainingActions) {\n            await convertAction(action, postStepResults, utils, external, convertorSet);\n        }\n\n        results.push((parameters, context) => {\n            if (!lockResolution.valueOf(parameters)) {\n                execute(postStepResults, parameters, context);\n            } else {\n                context.locked = true;\n                const step: ExecutionStep = (parameters, context) => {\n                    for (let i in parameters) {\n                        postExecution.parameters[i] = parameters[i];\n                    }\n                    if (!context.locked) {\n                        deletePostAction(postExecution, context);\n                        execute(postStepResults, parameters, context);    \n                    }\n                };\n                const postExecution: ExecutionWithParams = {\n                    steps: [step],\n                    parameters,\n                };\n        \n                addPostAction(postExecution, context);\n            }\n        });\n        return ConvertBehavior.SKIP_REMAINING_ACTIONS;\n    }\n}","import { SetAction } from \"../../actions/SetAction\";\nimport { ExecutionStep } from \"../../execution/ExecutionStep\";\nimport { SupportedTypes } from \"../../resolutions/SupportedTypes\";\nimport { calculateResolution } from \"../../resolutions/calculate\";\nimport { calculateString } from \"../../resolutions/calculateString\";\nimport { ValueOf } from \"../../types/ValueOf\";\nimport { ConvertBehavior } from \"../Convertor\";\nimport { newParams, recycleParams } from \"./parameter-utils\";\n\nexport async function convertSetProperty(\n        action: SetAction,\n        results: ExecutionStep[]): Promise<ConvertBehavior|void> {\n    if (!action.set) {\n        return;\n    }\n    const { set } = action;\n    const variable = calculateString(set.variable);\n    const access = [variable, ...(set.access?.map(a => calculateResolution(a)) ?? [])];\n    const value = calculateResolution(set.value);\n\n    results.push((parameters)=> {\n        let root: any = parameters;\n        for (let i = 0; i < access.length; i++) {\n            if (!root) {\n                console.warn(\"Invalid access\");\n                return;\n            }\n            const key = access[i]?.valueOf(parameters);\n            if (Array.isArray(root)) {\n                if (typeof key === \"number\") {\n                    if (i === access.length - 1) {\n                        parameters.value = root[key];\n                        root[key] = value?.valueOf(parameters);\n                    } else {\n                        root = root[key];\n                    }\n                } else {\n                    console.warn(\"Invalid key for array: \", key);\n                }\n            } else if (typeof(root) === \"object\") {\n                if (i === access.length - 1) {\n                    parameters.value = root[key + \"\"];\n                    root[key + \"\"] = value?.valueOf(parameters);\n                } else {\n                    root = root[key + \"\"];\n                }\n            }    \n        }\n    });    \n}\n\nexport async function convertSetsProperty(\n        action: SetAction,\n        results: ExecutionStep[]): Promise<ConvertBehavior|void> {\n    if (!action.sets) {\n        return;\n    }\n    const { sets } = action;\n    const setsEntries: [string, ValueOf<SupportedTypes> | undefined | null][] = !sets ? [] : Object.entries(sets).map(([key, value]) => [key, calculateResolution(value)]);\n\n    results.push((parameters, context)=> {\n        const paramsTemp = newParams(undefined, context);\n\n        for (const [key, value] of setsEntries) {\n            parameters.value = parameters[key];\n            paramsTemp[key] = value?.valueOf(parameters);    \n        }\n        delete parameters.value;\n        for (const [key] of setsEntries) {\n            parameters[key] = paramsTemp[key];\n        }\n        recycleParams(paramsTemp, context);\n    });    \n}\n\nexport async function convertDefaultValuesProperty(\n    action: SetAction,\n    results: ExecutionStep[]): Promise<ConvertBehavior|void> {\nif (!action.defaultValues) {\n    return;\n}\nconst { defaultValues } = action;\nconst defaultValuesEntries: [string, ValueOf<SupportedTypes> | undefined | null][] = !defaultValues ? [] : Object.entries(defaultValues).map(([key, value]) => [key, calculateResolution(value)]);\n\nresults.push((parameters, context)=> {\n    const paramsTemp = newParams(undefined, context);\n\n    for (const [key, value] of defaultValuesEntries) {\n        parameters.value = parameters[key];\n        paramsTemp[key] = value?.valueOf(parameters);    \n    }\n    delete parameters.value;\n    for (const [key] of defaultValuesEntries) {\n        if (parameters[key] === undefined) {\n            parameters[key] = paramsTemp[key];\n        }\n    }\n    recycleParams(paramsTemp, context);\n});    \n}\n","import { HookAction } from \"../../actions/HookAction\";\nimport { ExecutionStep } from \"../../execution/ExecutionStep\";\nimport { StringResolution } from \"../../resolutions/StringResolution\";\nimport { calculateString } from \"../../resolutions/calculateString\";\nimport { ValueOf } from \"../../types/ValueOf\";\nimport { ConvertBehavior, Utils } from \"../Convertor\";\n\nexport async function convertHooksProperty<T>(\n        action: HookAction & T,\n        results: ExecutionStep[],\n        _: Utils<T & HookAction>,\n        external: Record<string, any>): Promise<ConvertBehavior|void> {\n    if (!action.hooks) {\n        return;\n    }\n    const { hooks } = action;\n\n    const hooksResolution: StringResolution[] = hooks;\n    const hooksValueOf: ValueOf<string>[] = hooksResolution.map(hook => calculateString(hook));\n\n    results.push((parameters) => {\n        for (let hook of hooksValueOf) {\n            const h = hook.valueOf(parameters);\n            const x = external[h];\n            if (x) {\n                parameters[h] = x;\n            } else {\n                console.warn(\"Does not exist\", x);\n            }\n        }\n    });\n}\n","import { LogAction } from \"../../actions/LogAction\";\nimport { ExecutionStep } from \"../../execution/ExecutionStep\";\nimport { Resolution } from \"../../resolutions/Resolution\";\nimport { calculateResolution } from \"../../resolutions/calculate\";\nimport { ConvertBehavior, Utils } from \"../Convertor\";\n\nexport async function convertLogProperty<T>(\n        action: LogAction,\n        results: ExecutionStep[],\n        _: Utils<T>,\n        external: Record<string, any>): Promise<ConvertBehavior|void> {\n    if (action.log === undefined) {\n        return;\n    }\n    const messages: Resolution[] = Array.isArray(action.log) ? action.log : [action.log];\n    const resolutions = messages.map(m => calculateResolution(m));\n    results.push((parameters)=> external.log(...resolutions.map(r => r?.valueOf(parameters))));    \n}\n","import { ExecutionParameters, ExecutionStep, execute } from \"../../execution/ExecutionStep\";\nimport { ConvertBehavior, ConvertorSet, Utils } from \"../Convertor\";\nimport { calculateNumber } from \"../../resolutions/calculateNumber\";\nimport { convertAction } from \"./convert-action\";\nimport { LogicAction } from \"../../actions/LogicAction\";\nimport { Context } from \"../../context/Context\";\nimport { ValueOf } from \"../../types/ValueOf\";\nimport { calculateBoolean } from \"../../resolutions/calculateBoolean\";\nimport { calculateArray } from \"../../resolutions/calculateArray\";\n\nconst VARIABLE_NAMES = \"ijklmnopqrstuvwxyzabcdefgh\".split(\"\");\n\nfunction keepLooping(parameters: ExecutionParameters, context: Context, loops: ValueOf<number>[], steps: ExecutionStep[], depth: number = 0) {\n    if (depth >= loops.length) {\n        execute(steps, parameters, context);\n        return;\n    }\n    const length = loops[depth].valueOf(parameters);\n    const p = parameters;\n    const letter = VARIABLE_NAMES[depth];\n    for (let i = 0; i < length; i++) {\n        p.index = p[letter] = i;\n        keepLooping(p, context, loops, steps, depth + 1);\n    }\n}\n\nexport async function convertLoopProperty<T>(\n        action: T & LogicAction,\n        stepResults: ExecutionStep[],\n        utils: Utils<T & LogicAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (action.loop === undefined) {\n        return;\n    }\n    if (!action.loop) {\n        return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n    }\n    const { loop, ...subAction } = action;\n    const loops = Array.isArray(loop) ? loop: [loop];\n    if (!loops.length) {\n        return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n    }\n    const loopResolution = loops.map(loop => calculateNumber(loop, 0));\n    const subStepResults: ExecutionStep[] = [];\n    await convertAction<LogicAction>(subAction, subStepResults, utils, external, convertorSet);\n    stepResults.push((parameters, context) =>  keepLooping(parameters, context, loopResolution, subStepResults));\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}\n\nexport async function convertWhileProperty<T>(\n        action: T & LogicAction,\n        stepResults: ExecutionStep[],\n        utils: Utils<T & LogicAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (action.whileCondition === undefined) {\n        return;\n    }\n    if (!action.whileCondition) {\n        return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n    }\n    const { whileCondition, ...subAction } = action;\n    const whileResolution = calculateBoolean(whileCondition);\n    const subStepResults: ExecutionStep[] = [];\n    await convertAction<LogicAction>(subAction, subStepResults, utils, external, convertorSet);\n    stepResults.push((parameters, context) =>  {\n        while(whileResolution.valueOf(parameters)) {\n            execute(subStepResults, parameters, context);\n        }\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}\n\nexport async function convertLoopEachProperty<T>(\n        action: T & LogicAction,\n        stepResults: ExecutionStep[],\n        utils: Utils<T & LogicAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (action.loopEach === undefined) {\n        return;\n    }\n    const { loopEach, ...subAction } = action;\n    const loopEachResolution = calculateArray(loopEach);\n    const subStepResults: ExecutionStep[] = [];\n    await convertAction<LogicAction>(subAction, subStepResults, utils, external, convertorSet);\n    stepResults.push((parameters, context) =>  {\n        const array = loopEachResolution?.valueOf(parameters);\n        if (array) {\n            for (let i = 0; i < array.length; i++) {\n                parameters.index = i;\n                parameters.element = array[i];\n                execute(subStepResults, parameters, context);\n            }\n        }\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}","import { ConvertBehavior, ConvertorSet, Utils } from \"../Convertor\";\nimport { calculateResolution } from \"../../resolutions/calculate\";\nimport { ValueOf } from \"../../types/ValueOf\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../../execution/ExecutionStep\";\nimport { convertAction } from \"./convert-action\";\nimport { SupportedTypes } from \"../../resolutions/SupportedTypes\";\nimport { ScriptAction } from \"../../actions/ScriptAction\";\nimport { newParams, recycleParams } from \"./parameter-utils\";\n\nexport async function convertParametersProperty<T>(\n        action: ScriptAction,\n        results: ExecutionStep[],\n        utils: Utils<T & ScriptAction>,\n        external: Record<string, any>,\n        convertorSet: ConvertorSet): Promise<ConvertBehavior | void> {\n    if (!action.parameters) {\n        return;\n    }\n    const { parameters, ...subAction } = action;\n\n    const paramEntries: [string, ValueOf<SupportedTypes> | undefined | null][] = Object.entries(parameters ?? {})\n        .map(([key, resolution]) => [key, calculateResolution(resolution)]);\n    \n    const subStepResults: ExecutionStep[] = [];\n    await convertAction(subAction, subStepResults, utils, external, convertorSet);\n\n    results.push((parameters, context) => {\n        const paramValues: ExecutionParameters = newParams(undefined, context);\n        for (let entry of paramEntries) {\n            const key: string = entry[0];\n            paramValues[key] = entry[1]?.valueOf(parameters);\n        }\n\n        execute(subStepResults, paramValues, context);\n\n        recycleParams(paramValues, context);\n    });\n    return ConvertBehavior.SKIP_REMAINING_CONVERTORS;\n}\n","import { ScriptAction } from \"../../actions/ScriptAction\";\nimport { ExecutionStep, execute } from \"../../execution/ExecutionStep\";\nimport { ConvertBehavior, Utils } from \"../Convertor\";\n\nexport async function convertScriptProperty<T>(\n        action: ScriptAction,\n        results: ExecutionStep[],\n        {getSteps}: Utils<T>): Promise<ConvertBehavior|void> {\n    if (!action.executeScript) {\n        return;\n    }\n    const { executeScript } = action;\n\n    const name = executeScript;\n    const steps = getSteps({ name });\n    results.push((parameters, context) => execute(steps, parameters, context));\n}\n\n","import { ConvertorSet } from \"./Convertor\";\nimport { convertActionsProperty } from \"./actions/actions-convertor\";\nimport { convertCallbackProperty, convertExecuteCallbackProperty } from \"./actions/callback-convertor\";\nimport { convertConditionProperty } from \"./actions/condition-convertor\";\nimport { convertExternalCallProperty } from \"./actions/convert-external-call\";\nimport { convertDelayProperty, convertLockProperty, convertPauseProperty } from \"./actions/convert-pause\";\nimport { convertDefaultValuesProperty, convertSetProperty, convertSetsProperty } from \"./actions/convert-set\";\nimport { convertHooksProperty } from \"./actions/hooks-convertor\";\nimport { convertLogProperty } from \"./actions/log-convertor\";\nimport { convertLoopEachProperty, convertLoopProperty } from \"./actions/loop-convertor\";\nimport { convertParametersProperty } from \"./actions/parameters-convertor\";\nimport { convertRefreshProperty } from \"./actions/refresh-convertor\";\nimport { convertScriptProperty } from \"./actions/script-convertor\";\n\nexport function getDefaultConvertors(): ConvertorSet {\n    return {\n        actionsConvertor: [\n            convertHooksProperty,\n            convertParametersProperty,\n            convertDefaultValuesProperty,\n            convertRefreshProperty,\n            convertLoopEachProperty,\n            convertLoopProperty,\n            convertConditionProperty,\n            convertCallbackProperty,\n            convertDelayProperty,\n            convertPauseProperty,\n            convertLockProperty,\n            convertSetProperty,\n            convertSetsProperty,\n            convertExecuteCallbackProperty,\n            convertExternalCallProperty,\n            convertLogProperty,\n            convertScriptProperty,\n            convertActionsProperty,\n        ],\n    };\n}\n","import { Context, createContext } from \"../context/Context\";\nimport { ConvertorSet } from \"../convertor/Convertor\";\nimport { convertScripts } from \"../convertor/actions/convert-action\";\nimport { DEFAULT_REFRESH_FRAME_RATE } from \"../convertor/actions/refresh-convertor\";\nimport { getDefaultConvertors } from \"../convertor/default-convertors\";\nimport { DEFAULT_EXTERNALS } from \"../convertor/default-externals\";\nimport { ExecutionParameters, ExecutionStep, execute } from \"../execution/ExecutionStep\";\nimport { Script, ScriptFilter, Tag, filterScripts } from \"../scripts/Script\";\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface RefreshBehavior {\n    frameRate?: number;\n    cleanupAfterRefresh?: boolean;\n    parameters?: ExecutionParameters;\n}\n\nexport interface ScriptProcessorHelper {\n    refreshSteps(steps: ExecutionStep[], behavior?: RefreshBehavior, processId?: string): { cleanup: () => void; processId: string };\n    stopRefresh(processId: string): void;\n}\n\nexport class ScriptProcessor<T, E = {}> {\n    private scripts: Script<T>[];\n    private scriptMap?: Map<Script<T>, ExecutionStep[]>;\n    private external: (E|{}) & typeof DEFAULT_EXTERNALS;\n    private convertorSet: ConvertorSet;\n    private refreshCleanups: Record<string, () => void> = {};\n\n    constructor(scripts: Script<T>[], external = {}, convertorSet: ConvertorSet = getDefaultConvertors()) {\n        this.scripts = scripts;\n        this.convertorSet = convertorSet;\n        this.external = {...DEFAULT_EXTERNALS, ...external};\n    }\n\n    updateScripts(scripts: Script<T>[]) {\n        this.clear();\n        this.scripts = scripts;\n        this.scriptMap = undefined;\n    }\n\n    clear() {\n        Object.values(this.refreshCleanups).forEach(cleanup => {\n            cleanup();\n        });\n        Object.keys(this.refreshCleanups).forEach(key => {\n            delete this.refreshCleanups[key];\n        });\n    }\n\n    private async fetchScripts(): Promise<Map<Script<T>, ExecutionStep[]>> {\n        if (!this.scriptMap) {\n            this.scriptMap = await convertScripts(this.scripts, this.external, this.convertorSet, {\n                refreshSteps: this.refreshSteps.bind(this),\n                stopRefresh: this.stopRefresh.bind(this),\n            });\n        }\n        return this.scriptMap!;\n    }\n\n    private createRefreshCleanup(behavior: RefreshBehavior, context: Context) {\n        const cleanupActions = context.cleanupActions;\n        return behavior.cleanupAfterRefresh && cleanupActions ? () => {\n            for (let cleanup of cleanupActions) {\n                cleanup();\n            }\n            cleanupActions.length = 0;\n        } : () => {};\n    }\n\n    async getSteps(filter: ScriptFilter) {\n        const scriptMap = await this.fetchScripts();\n        const scripts = filterScripts(this.scripts, filter);\n        const steps: ExecutionStep[] = [];\n        scripts.forEach(script => scriptMap.get(script)?.forEach(step => steps.push(step)));\n        return steps;\n    }\n\n    async runByName(name: string, parameters: ExecutionParameters = {}) {\n        const context: Context = createContext();\n        execute(await this.getSteps({ name }), parameters, context);\n        return () => context.cleanupActions?.forEach(action => action());\n    }\n\n    async runByTags(tags: Tag[], parameters: ExecutionParameters = {}) {\n        const context: Context = createContext();\n        execute(await this.getSteps({ tags }), parameters, context);\n        return () => context.cleanupActions?.forEach(action => action());\n    }\n\n    private async refreshWithFilter(filter: ScriptFilter, behavior: RefreshBehavior = {}) {\n        return this.refreshSteps(await this.getSteps(filter), behavior);\n    }\n\n    private stopRefresh(processId: string) {\n        this.refreshCleanups[processId]?.();\n        delete this.refreshCleanups[processId];\n    }\n    \n    private refreshSteps(steps: ExecutionStep[], behavior: RefreshBehavior = {}, processId?: string) {\n        const context: Context = createContext();\n        const parameters: ExecutionParameters = { ...behavior.parameters, time: 0, frame: 0 };\n        const refreshCleanup = this.createRefreshCleanup(behavior, context);\n        const frameRate = behavior.frameRate ?? DEFAULT_REFRESH_FRAME_RATE;\n        const frameMs = 1000 / frameRate;\n        let lastFrameTime = Number.MIN_SAFE_INTEGER;\n        let frame = 0;\n        const loop = (time: number) => {\n            if (time >= lastFrameTime + frameMs) {\n                parameters.time = time;\n                parameters.frame = frame;\n                execute(steps, parameters, context);\n                refreshCleanup();\n                frame++;\n                lastFrameTime = time;\n            }\n            animationFrameId = requestAnimationFrame(loop);\n        };\n        let animationFrameId = requestAnimationFrame(loop);\n        const cleanup = () => {\n            refreshCleanup();\n            cancelAnimationFrame(animationFrameId);\n        }\n        const actualProcessId = processId ?? uuidv4();\n        //  cleanup previous process if it exists.\n        this.refreshCleanups[actualProcessId]?.();\n\n        this.refreshCleanups[actualProcessId] = cleanup;\n\n        return { processId: actualProcessId, cleanup };\n    }\n    \n    refreshByName(name: string, behavior: RefreshBehavior = {}) {\n        return this.refreshWithFilter({ name }, behavior);\n    }\n\n    refreshByTags(tags: string[], behavior: RefreshBehavior = {}) {\n        return this.refreshWithFilter({ tags }, behavior);\n    }\n}"],"names":["DEFAULT_EXTERNALS","log","console","setTimeout","clearTimeout","fetch","global","ObjectPool","factory","cleanup","_proto","prototype","generate","_this$pool$pop","pool","pop","recycle","value","push","createContext","_temp","_ref$parameters","_ref","parameters","_ref$cleanupActions","cleanupActions","_ref$objectPool","objectPool","k","_ref$postActionListen","postActionListener","Set","_ref$external","external","_extends","locked","addPostAction","postAction","context","has","add","steps","forEach","step","deletePostAction","executePostActions","listener","i","ConvertBehavior","execute","length","params","changedParameters","_iterator","_createForOfIteratorHelperLoose","_step","done","filterMatchesTags","filter","tags","_filter$tags","every","tag","some","t","Array","isArray","filterScripts","scripts","namesToFilter","name","undefined","indexOf","executeAction","action","utils","convertorSet","results","_ConvertBehavior$SKIP","SKIP_REMAINING_ACTIONS","Promise","resolve","convertAction","then","_convertAction","e","reject","executeScript","scriptName","processorHelper","convertScripts","scriptMap","script","find","get","Map","set","getSteps","filteredScripts","apply","_temp2","_forOf","_scriptMap$get","_interrupt","scriptSteps","actions","_forTo","getRemainingActions","slice","refreshSteps","stopRefresh","convertBehavior","stepResults","actionsConvertor","convertor","SKIP_REMAINING_CONVERTORS","_exit","newParams","recycleParams","FORMULA_SEPARATORS","hasFormula","resolution","isFormula","item","Object","values","keys","formula","_FORMULA_SEPARATORS$m","map","char","startCharacter","prefix","suffix","getInnerFormulas","substring","split","chunk","index","textSuffix","_chunk$split","IDENTIFIER_REGEX","isSimpleInnerFormula","innerFormula","test","calculateEvaluator","evaluator","defaultValue","scope","_evaluator$evaluate","evaluate","error","JSON","parse","stringify","getEvaluator","mathEvaluator","math","compile","_scope$formula","getFormulaEvaluator","Error","evaluators","_ref2","join","calculateArray","array","valueOf","calculateResolution","evalItem","calculateMap","evaluatorEntries","entries","key","fromEntries","calculateObject","subject","access","_value$access","node","_node","_node2","Float32Array","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","calculateNumber","calculateString","calculateBoolean","calculateTypedArray","ArrayConstructor","compiledArray","bufferArray","BYTES_PER_ELEMENT","convertRefreshProperty","refresh","subAction","_objectWithoutPropertiesLoose","_excluded","subStepResults","processIdValue","processId","stop","cleanupAfterRefresh","frameRate","DEFAULT_REFRESH_FRAME_RATE","_utils$refreshSteps","convertActionsProperty","_action$actions","convertActions","a","convertExecuteCallbackProperty","executeCallback","callbackToExecute","callbackName","_utils$executeCallbac","_utils$executeCallbac2","call","convertCallbackProperty","callback","callbackParameters","_forIn","callbackSteps","onCallback","_callbackParameters$k","convertConditionProperty","condition","conditionResolution","convertExternalCallProperty","_","callExternal","subjectResolution","methodResolution","method","args","arguments","argsValues","m","_subjectResolution$va","s","r","convertLockProperty","lock","unlock","_excluded3","unlockResolution","lockResolution","postStepResults","remainingActions","_temp6","postExecution","_temp5","convertPauseProperty","pause","_excluded2","pauseResolution","_temp4","_temp3","convertDelayProperty","delay","delayAmount","performPostSteps","timeout","convertDefaultValuesProperty","defaultValues","defaultValuesEntries","paramsTemp","_iterator3","_step3","_step3$value","_iterator4","_step4","_step4$value","convertSetsProperty","sets","setsEntries","_step$value","_iterator2","_step2","_step2$value","convertSetProperty","variable","concat","_set$access$map","_set$access","root","_access$i","warn","convertHooksProperty","hooks","hooksResolution","hooksValueOf","hook","h","x","convertLogProperty","messages","resolutions","convertLoopEachProperty","loopEach","loopEachResolution","element","convertLoopProperty","loop","loops","loopResolution","keepLooping","VARIABLE_NAMES","depth","p","letter","convertParametersProperty","paramEntries","paramValues","_entry$","entry","convertScriptProperty","getDefaultConvertors","ScriptProcessor","updateScripts","clear","refreshCleanups","_this","fetchScripts","_this2","bind","_convertScripts","createRefreshCleanup","behavior","_this3","runByName","_this4","_this4$getSteps","_context$cleanupActio","runByTags","_this5","_this5$getSteps","_context$cleanupActio2","refreshWithFilter","_refreshSteps","_this6","_this6$getSteps","_this$refreshCleanups","_this$refreshCleanups2","time","frame","refreshCleanup","_behavior$frameRate","frameMs","lastFrameTime","Number","MIN_SAFE_INTEGER","animationFrameId","requestAnimationFrame","cancelAnimationFrame","actualProcessId","uuidv4","_this$refreshCleanups3","_this$refreshCleanups4","refreshByName","refreshByTags"],"mappings":"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"}